
TDOA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dc4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003060  08003060  00013060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003080  08003080  00013080  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003084  08003084  00013084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  24000000  08003088  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00035c34  24000080  08003108  00020080  2**3
                  ALLOC
  7 ._user_heap_stack 00000604  24035cb4  08003108  00025cb4  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001452a  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000217e  00000000  00000000  000345d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000b98  00000000  00000000  00036758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00000ae0  00000000  00000000  000372f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00035073  00000000  00000000  00037dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000cebd  00000000  00000000  0006ce43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00157ef2  00000000  00000000  00079d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  001d1bf2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  0000310c  00000000  00000000  001d1c48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000080 	.word	0x24000080
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003044 	.word	0x08003044

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000084 	.word	0x24000084
 80002d4:	08003044 	.word	0x08003044

080002d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b086      	sub	sp, #24
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	ts = &ts1;
 80002de:	4bb7      	ldr	r3, [pc, #732]	; (80005bc <main+0x2e4>)
 80002e0:	4ab7      	ldr	r2, [pc, #732]	; (80005c0 <main+0x2e8>)
 80002e2:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002e4:	f000 fefc 	bl	80010e0 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80002e8:	2006      	movs	r0, #6
 80002ea:	f001 f8be 	bl	800146a <HAL_NVIC_DisableIRQ>
  HAL_NVIC_DisableIRQ(EXTI3_IRQn);
 80002ee:	2009      	movs	r0, #9
 80002f0:	f001 f8bb 	bl	800146a <HAL_NVIC_DisableIRQ>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002f4:	f000 fb1a 	bl	800092c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002f8:	f000 fbe2 	bl	8000ac0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80002fc:	f000 fb92 	bl	8000a24 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_ENABLE(&htim2);
 8000300:	4bb0      	ldr	r3, [pc, #704]	; (80005c4 <main+0x2ec>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	681a      	ldr	r2, [r3, #0]
 8000306:	4baf      	ldr	r3, [pc, #700]	; (80005c4 <main+0x2ec>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	f042 0201 	orr.w	r2, r2, #1
 800030e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000310:	2006      	movs	r0, #6
 8000312:	f001 f89c 	bl	800144e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000316:	2009      	movs	r0, #9
 8000318:	f001 f899 	bl	800144e <HAL_NVIC_EnableIRQ>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch(state){
 800031c:	4baa      	ldr	r3, [pc, #680]	; (80005c8 <main+0x2f0>)
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	2b04      	cmp	r3, #4
 8000322:	d8fb      	bhi.n	800031c <main+0x44>
 8000324:	a201      	add	r2, pc, #4	; (adr r2, 800032c <main+0x54>)
 8000326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800032a:	bf00      	nop
 800032c:	08000341 	.word	0x08000341
 8000330:	0800047f 	.word	0x0800047f
 8000334:	080005f1 	.word	0x080005f1
 8000338:	0800072f 	.word	0x0800072f
 800033c:	08000861 	.word	0x08000861
	  	  case S1_Estimation:
	  		  if(ts1.riseCount == SAMPLE_SIZE && ts1.fallCount == SAMPLE_SIZE){
 8000340:	4a9f      	ldr	r2, [pc, #636]	; (80005c0 <main+0x2e8>)
 8000342:	f649 4340 	movw	r3, #40000	; 0x9c40
 8000346:	4413      	add	r3, r2
 8000348:	881b      	ldrh	r3, [r3, #0]
 800034a:	f241 3288 	movw	r2, #5000	; 0x1388
 800034e:	4293      	cmp	r3, r2
 8000350:	f040 82c3 	bne.w	80008da <main+0x602>
 8000354:	4a9a      	ldr	r2, [pc, #616]	; (80005c0 <main+0x2e8>)
 8000356:	f649 4342 	movw	r3, #40002	; 0x9c42
 800035a:	4413      	add	r3, r2
 800035c:	881b      	ldrh	r3, [r3, #0]
 800035e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000362:	4293      	cmp	r3, r2
 8000364:	f040 82b9 	bne.w	80008da <main+0x602>

	  			  Get_Mid_Points(&ts1, midPoints1);
 8000368:	4998      	ldr	r1, [pc, #608]	; (80005cc <main+0x2f4>)
 800036a:	4895      	ldr	r0, [pc, #596]	; (80005c0 <main+0x2e8>)
 800036c:	f000 fc80 	bl	8000c70 <Get_Mid_Points>
	  			  for(int i = 0; i < midPointCount-1; i++){
 8000370:	2300      	movs	r3, #0
 8000372:	617b      	str	r3, [r7, #20]
 8000374:	e01d      	b.n	80003b2 <main+0xda>
	  				  periodS[0] = periodS[0] + midPoints1[i+1] - midPoints1[i];
 8000376:	4b96      	ldr	r3, [pc, #600]	; (80005d0 <main+0x2f8>)
 8000378:	ed93 6b00 	vldr	d6, [r3]
 800037c:	697b      	ldr	r3, [r7, #20]
 800037e:	3301      	adds	r3, #1
 8000380:	4a92      	ldr	r2, [pc, #584]	; (80005cc <main+0x2f4>)
 8000382:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000386:	ee07 3a90 	vmov	s15, r3
 800038a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800038e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000392:	4a8e      	ldr	r2, [pc, #568]	; (80005cc <main+0x2f4>)
 8000394:	697b      	ldr	r3, [r7, #20]
 8000396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800039a:	ee07 3a90 	vmov	s15, r3
 800039e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80003a2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80003a6:	4b8a      	ldr	r3, [pc, #552]	; (80005d0 <main+0x2f8>)
 80003a8:	ed83 7b00 	vstr	d7, [r3]
	  			  for(int i = 0; i < midPointCount-1; i++){
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	3301      	adds	r3, #1
 80003b0:	617b      	str	r3, [r7, #20]
 80003b2:	4b88      	ldr	r3, [pc, #544]	; (80005d4 <main+0x2fc>)
 80003b4:	881b      	ldrh	r3, [r3, #0]
 80003b6:	3b01      	subs	r3, #1
 80003b8:	697a      	ldr	r2, [r7, #20]
 80003ba:	429a      	cmp	r2, r3
 80003bc:	dbdb      	blt.n	8000376 <main+0x9e>
	  			  }
	  			  periodS[0] = periodS[0]/(midPointCount-1);
 80003be:	4b84      	ldr	r3, [pc, #528]	; (80005d0 <main+0x2f8>)
 80003c0:	ed93 5b00 	vldr	d5, [r3]
 80003c4:	4b83      	ldr	r3, [pc, #524]	; (80005d4 <main+0x2fc>)
 80003c6:	881b      	ldrh	r3, [r3, #0]
 80003c8:	3b01      	subs	r3, #1
 80003ca:	ee07 3a90 	vmov	s15, r3
 80003ce:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80003d2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80003d6:	4b7e      	ldr	r3, [pc, #504]	; (80005d0 <main+0x2f8>)
 80003d8:	ed83 7b00 	vstr	d7, [r3]
	  			  for(int i = 0; i < midPointCount;i++){
 80003dc:	2300      	movs	r3, #0
 80003de:	613b      	str	r3, [r7, #16]
 80003e0:	e043      	b.n	800046a <main+0x192>
	  				  midPointShift[i] = fmod(midPoints1[i]+period/2,period)-period/2;
 80003e2:	4a7a      	ldr	r2, [pc, #488]	; (80005cc <main+0x2f4>)
 80003e4:	693b      	ldr	r3, [r7, #16]
 80003e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80003ea:	ee07 3a90 	vmov	s15, r3
 80003ee:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80003f2:	4b79      	ldr	r3, [pc, #484]	; (80005d8 <main+0x300>)
 80003f4:	ed93 5b00 	vldr	d5, [r3]
 80003f8:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80003fc:	ee85 7b04 	vdiv.f64	d7, d5, d4
 8000400:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000404:	4b74      	ldr	r3, [pc, #464]	; (80005d8 <main+0x300>)
 8000406:	ed93 6b00 	vldr	d6, [r3]
 800040a:	eeb0 1b46 	vmov.f64	d1, d6
 800040e:	eeb0 0b47 	vmov.f64	d0, d7
 8000412:	f002 fcd5 	bl	8002dc0 <fmod>
 8000416:	eeb0 5b40 	vmov.f64	d5, d0
 800041a:	4b6f      	ldr	r3, [pc, #444]	; (80005d8 <main+0x300>)
 800041c:	ed93 6b00 	vldr	d6, [r3]
 8000420:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8000424:	ee86 7b04 	vdiv.f64	d7, d6, d4
 8000428:	ee35 7b47 	vsub.f64	d7, d5, d7
 800042c:	4a6b      	ldr	r2, [pc, #428]	; (80005dc <main+0x304>)
 800042e:	693b      	ldr	r3, [r7, #16]
 8000430:	00db      	lsls	r3, r3, #3
 8000432:	4413      	add	r3, r2
 8000434:	ed83 7b00 	vstr	d7, [r3]
	  				  meanShiftS1 = meanShiftS1 + midPointShift[i] / midPointCount;
 8000438:	4a68      	ldr	r2, [pc, #416]	; (80005dc <main+0x304>)
 800043a:	693b      	ldr	r3, [r7, #16]
 800043c:	00db      	lsls	r3, r3, #3
 800043e:	4413      	add	r3, r2
 8000440:	ed93 5b00 	vldr	d5, [r3]
 8000444:	4b63      	ldr	r3, [pc, #396]	; (80005d4 <main+0x2fc>)
 8000446:	881b      	ldrh	r3, [r3, #0]
 8000448:	ee07 3a90 	vmov	s15, r3
 800044c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000450:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000454:	4b62      	ldr	r3, [pc, #392]	; (80005e0 <main+0x308>)
 8000456:	ed93 7b00 	vldr	d7, [r3]
 800045a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800045e:	4b60      	ldr	r3, [pc, #384]	; (80005e0 <main+0x308>)
 8000460:	ed83 7b00 	vstr	d7, [r3]
	  			  for(int i = 0; i < midPointCount;i++){
 8000464:	693b      	ldr	r3, [r7, #16]
 8000466:	3301      	adds	r3, #1
 8000468:	613b      	str	r3, [r7, #16]
 800046a:	4b5a      	ldr	r3, [pc, #360]	; (80005d4 <main+0x2fc>)
 800046c:	881b      	ldrh	r3, [r3, #0]
 800046e:	461a      	mov	r2, r3
 8000470:	693b      	ldr	r3, [r7, #16]
 8000472:	4293      	cmp	r3, r2
 8000474:	dbb5      	blt.n	80003e2 <main+0x10a>
	  			  }

	  			  state = S2_Estimation;
 8000476:	4b54      	ldr	r3, [pc, #336]	; (80005c8 <main+0x2f0>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 800047c:	e22d      	b.n	80008da <main+0x602>
	  	  case S2_Estimation:
	  		  if(ts2.riseCount == SAMPLE_SIZE && ts2.fallCount == SAMPLE_SIZE){
 800047e:	4a59      	ldr	r2, [pc, #356]	; (80005e4 <main+0x30c>)
 8000480:	f649 4340 	movw	r3, #40000	; 0x9c40
 8000484:	4413      	add	r3, r2
 8000486:	881b      	ldrh	r3, [r3, #0]
 8000488:	f241 3288 	movw	r2, #5000	; 0x1388
 800048c:	4293      	cmp	r3, r2
 800048e:	f040 8226 	bne.w	80008de <main+0x606>
 8000492:	4a54      	ldr	r2, [pc, #336]	; (80005e4 <main+0x30c>)
 8000494:	f649 4342 	movw	r3, #40002	; 0x9c42
 8000498:	4413      	add	r3, r2
 800049a:	881b      	ldrh	r3, [r3, #0]
 800049c:	f241 3288 	movw	r2, #5000	; 0x1388
 80004a0:	4293      	cmp	r3, r2
 80004a2:	f040 821c 	bne.w	80008de <main+0x606>
	  			  Get_Mid_Points(&ts2,midPoints2);
 80004a6:	4950      	ldr	r1, [pc, #320]	; (80005e8 <main+0x310>)
 80004a8:	484e      	ldr	r0, [pc, #312]	; (80005e4 <main+0x30c>)
 80004aa:	f000 fbe1 	bl	8000c70 <Get_Mid_Points>

	  			  for(int i = 0; i < midPointCount-1; i++){
 80004ae:	2300      	movs	r3, #0
 80004b0:	60fb      	str	r3, [r7, #12]
 80004b2:	e01d      	b.n	80004f0 <main+0x218>
	  				  periodS[1] = periodS[1] + midPoints2[i+1] - midPoints2[i];
 80004b4:	4b46      	ldr	r3, [pc, #280]	; (80005d0 <main+0x2f8>)
 80004b6:	ed93 6b02 	vldr	d6, [r3, #8]
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	3301      	adds	r3, #1
 80004be:	4a4a      	ldr	r2, [pc, #296]	; (80005e8 <main+0x310>)
 80004c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004c4:	ee07 3a90 	vmov	s15, r3
 80004c8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80004cc:	ee36 6b07 	vadd.f64	d6, d6, d7
 80004d0:	4a45      	ldr	r2, [pc, #276]	; (80005e8 <main+0x310>)
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004d8:	ee07 3a90 	vmov	s15, r3
 80004dc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80004e0:	ee36 7b47 	vsub.f64	d7, d6, d7
 80004e4:	4b3a      	ldr	r3, [pc, #232]	; (80005d0 <main+0x2f8>)
 80004e6:	ed83 7b02 	vstr	d7, [r3, #8]
	  			  for(int i = 0; i < midPointCount-1; i++){
 80004ea:	68fb      	ldr	r3, [r7, #12]
 80004ec:	3301      	adds	r3, #1
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	4b38      	ldr	r3, [pc, #224]	; (80005d4 <main+0x2fc>)
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	3b01      	subs	r3, #1
 80004f6:	68fa      	ldr	r2, [r7, #12]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	dbdb      	blt.n	80004b4 <main+0x1dc>
	  			  }
	  			  periodS[1] = periodS[1]/(midPointCount-1);
 80004fc:	4b34      	ldr	r3, [pc, #208]	; (80005d0 <main+0x2f8>)
 80004fe:	ed93 5b02 	vldr	d5, [r3, #8]
 8000502:	4b34      	ldr	r3, [pc, #208]	; (80005d4 <main+0x2fc>)
 8000504:	881b      	ldrh	r3, [r3, #0]
 8000506:	3b01      	subs	r3, #1
 8000508:	ee07 3a90 	vmov	s15, r3
 800050c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000510:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000514:	4b2e      	ldr	r3, [pc, #184]	; (80005d0 <main+0x2f8>)
 8000516:	ed83 7b02 	vstr	d7, [r3, #8]

	  			  for(int i = 0; i < midPointCount;i++){
 800051a:	2300      	movs	r3, #0
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	e043      	b.n	80005a8 <main+0x2d0>
	  				  midPointShift[i] = fmod(midPoints2[i]+period/2,period)-period/2;
 8000520:	4a31      	ldr	r2, [pc, #196]	; (80005e8 <main+0x310>)
 8000522:	68bb      	ldr	r3, [r7, #8]
 8000524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000528:	ee07 3a90 	vmov	s15, r3
 800052c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8000530:	4b29      	ldr	r3, [pc, #164]	; (80005d8 <main+0x300>)
 8000532:	ed93 5b00 	vldr	d5, [r3]
 8000536:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 800053a:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800053e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000542:	4b25      	ldr	r3, [pc, #148]	; (80005d8 <main+0x300>)
 8000544:	ed93 6b00 	vldr	d6, [r3]
 8000548:	eeb0 1b46 	vmov.f64	d1, d6
 800054c:	eeb0 0b47 	vmov.f64	d0, d7
 8000550:	f002 fc36 	bl	8002dc0 <fmod>
 8000554:	eeb0 5b40 	vmov.f64	d5, d0
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <main+0x300>)
 800055a:	ed93 6b00 	vldr	d6, [r3]
 800055e:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8000562:	ee86 7b04 	vdiv.f64	d7, d6, d4
 8000566:	ee35 7b47 	vsub.f64	d7, d5, d7
 800056a:	4a1c      	ldr	r2, [pc, #112]	; (80005dc <main+0x304>)
 800056c:	68bb      	ldr	r3, [r7, #8]
 800056e:	00db      	lsls	r3, r3, #3
 8000570:	4413      	add	r3, r2
 8000572:	ed83 7b00 	vstr	d7, [r3]
	  				  meanShiftS2 = meanShiftS2 + midPointShift[i] / midPointCount;
 8000576:	4a19      	ldr	r2, [pc, #100]	; (80005dc <main+0x304>)
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	00db      	lsls	r3, r3, #3
 800057c:	4413      	add	r3, r2
 800057e:	ed93 5b00 	vldr	d5, [r3]
 8000582:	4b14      	ldr	r3, [pc, #80]	; (80005d4 <main+0x2fc>)
 8000584:	881b      	ldrh	r3, [r3, #0]
 8000586:	ee07 3a90 	vmov	s15, r3
 800058a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800058e:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000592:	4b16      	ldr	r3, [pc, #88]	; (80005ec <main+0x314>)
 8000594:	ed93 7b00 	vldr	d7, [r3]
 8000598:	ee36 7b07 	vadd.f64	d7, d6, d7
 800059c:	4b13      	ldr	r3, [pc, #76]	; (80005ec <main+0x314>)
 800059e:	ed83 7b00 	vstr	d7, [r3]
	  			  for(int i = 0; i < midPointCount;i++){
 80005a2:	68bb      	ldr	r3, [r7, #8]
 80005a4:	3301      	adds	r3, #1
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <main+0x2fc>)
 80005aa:	881b      	ldrh	r3, [r3, #0]
 80005ac:	461a      	mov	r2, r3
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	4293      	cmp	r3, r2
 80005b2:	dbb5      	blt.n	8000520 <main+0x248>
	  			  }

	  			  state = S3_Estimation;
 80005b4:	4b04      	ldr	r3, [pc, #16]	; (80005c8 <main+0x2f0>)
 80005b6:	2202      	movs	r2, #2
 80005b8:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 80005ba:	e190      	b.n	80008de <main+0x606>
 80005bc:	24013958 	.word	0x24013958
 80005c0:	24018788 	.word	0x24018788
 80005c4:	24035c58 	.word	0x24035c58
 80005c8:	2400009c 	.word	0x2400009c
 80005cc:	24030e3c 	.word	0x24030e3c
 80005d0:	24009cf0 	.word	0x24009cf0
 80005d4:	240000a2 	.word	0x240000a2
 80005d8:	24000000 	.word	0x24000000
 80005dc:	240000b0 	.word	0x240000b0
 80005e0:	24013950 	.word	0x24013950
 80005e4:	240223cc 	.word	0x240223cc
 80005e8:	2402c020 	.word	0x2402c020
 80005ec:	2402c018 	.word	0x2402c018

	  	  case S3_Estimation:
	  		  if(ts3.riseCount == SAMPLE_SIZE && ts3.fallCount == SAMPLE_SIZE){
 80005f0:	4abd      	ldr	r2, [pc, #756]	; (80008e8 <main+0x610>)
 80005f2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80005f6:	4413      	add	r3, r2
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80005fe:	4293      	cmp	r3, r2
 8000600:	f040 816f 	bne.w	80008e2 <main+0x60a>
 8000604:	4ab8      	ldr	r2, [pc, #736]	; (80008e8 <main+0x610>)
 8000606:	f649 4342 	movw	r3, #40002	; 0x9c42
 800060a:	4413      	add	r3, r2
 800060c:	881b      	ldrh	r3, [r3, #0]
 800060e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000612:	4293      	cmp	r3, r2
 8000614:	f040 8165 	bne.w	80008e2 <main+0x60a>

	  			  Get_Mid_Points(&ts3,midPoints3);
 8000618:	49b4      	ldr	r1, [pc, #720]	; (80008ec <main+0x614>)
 800061a:	48b3      	ldr	r0, [pc, #716]	; (80008e8 <main+0x610>)
 800061c:	f000 fb28 	bl	8000c70 <Get_Mid_Points>

	  			  for(int i = 0; i < midPointCount-1; i++){
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	e01d      	b.n	8000662 <main+0x38a>
	  				  periodS[2] = periodS[2] + midPoints3[i+1] - midPoints3[i];
 8000626:	4bb2      	ldr	r3, [pc, #712]	; (80008f0 <main+0x618>)
 8000628:	ed93 6b04 	vldr	d6, [r3, #16]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	3301      	adds	r3, #1
 8000630:	4aae      	ldr	r2, [pc, #696]	; (80008ec <main+0x614>)
 8000632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000636:	ee07 3a90 	vmov	s15, r3
 800063a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800063e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8000642:	4aaa      	ldr	r2, [pc, #680]	; (80008ec <main+0x614>)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800064a:	ee07 3a90 	vmov	s15, r3
 800064e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000652:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000656:	4ba6      	ldr	r3, [pc, #664]	; (80008f0 <main+0x618>)
 8000658:	ed83 7b04 	vstr	d7, [r3, #16]
	  			  for(int i = 0; i < midPointCount-1; i++){
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	3301      	adds	r3, #1
 8000660:	607b      	str	r3, [r7, #4]
 8000662:	4ba4      	ldr	r3, [pc, #656]	; (80008f4 <main+0x61c>)
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	3b01      	subs	r3, #1
 8000668:	687a      	ldr	r2, [r7, #4]
 800066a:	429a      	cmp	r2, r3
 800066c:	dbdb      	blt.n	8000626 <main+0x34e>
				  }
				  periodS[2] = periodS[2]/(midPointCount-1);
 800066e:	4ba0      	ldr	r3, [pc, #640]	; (80008f0 <main+0x618>)
 8000670:	ed93 5b04 	vldr	d5, [r3, #16]
 8000674:	4b9f      	ldr	r3, [pc, #636]	; (80008f4 <main+0x61c>)
 8000676:	881b      	ldrh	r3, [r3, #0]
 8000678:	3b01      	subs	r3, #1
 800067a:	ee07 3a90 	vmov	s15, r3
 800067e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8000682:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8000686:	4b9a      	ldr	r3, [pc, #616]	; (80008f0 <main+0x618>)
 8000688:	ed83 7b04 	vstr	d7, [r3, #16]

	  			  for(int i = 0; i < midPointCount;i++){
 800068c:	2300      	movs	r3, #0
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	e043      	b.n	800071a <main+0x442>
	  				  midPointShift[i] = fmod(midPoints3[i]+period/2,period)-period/2;
 8000692:	4a96      	ldr	r2, [pc, #600]	; (80008ec <main+0x614>)
 8000694:	683b      	ldr	r3, [r7, #0]
 8000696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800069a:	ee07 3a90 	vmov	s15, r3
 800069e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80006a2:	4b95      	ldr	r3, [pc, #596]	; (80008f8 <main+0x620>)
 80006a4:	ed93 5b00 	vldr	d5, [r3]
 80006a8:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80006ac:	ee85 7b04 	vdiv.f64	d7, d5, d4
 80006b0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80006b4:	4b90      	ldr	r3, [pc, #576]	; (80008f8 <main+0x620>)
 80006b6:	ed93 6b00 	vldr	d6, [r3]
 80006ba:	eeb0 1b46 	vmov.f64	d1, d6
 80006be:	eeb0 0b47 	vmov.f64	d0, d7
 80006c2:	f002 fb7d 	bl	8002dc0 <fmod>
 80006c6:	eeb0 5b40 	vmov.f64	d5, d0
 80006ca:	4b8b      	ldr	r3, [pc, #556]	; (80008f8 <main+0x620>)
 80006cc:	ed93 6b00 	vldr	d6, [r3]
 80006d0:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80006d4:	ee86 7b04 	vdiv.f64	d7, d6, d4
 80006d8:	ee35 7b47 	vsub.f64	d7, d5, d7
 80006dc:	4a87      	ldr	r2, [pc, #540]	; (80008fc <main+0x624>)
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	00db      	lsls	r3, r3, #3
 80006e2:	4413      	add	r3, r2
 80006e4:	ed83 7b00 	vstr	d7, [r3]
	  				  meanShiftS3 = meanShiftS3 + midPointShift[i] / midPointCount;
 80006e8:	4a84      	ldr	r2, [pc, #528]	; (80008fc <main+0x624>)
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	00db      	lsls	r3, r3, #3
 80006ee:	4413      	add	r3, r2
 80006f0:	ed93 5b00 	vldr	d5, [r3]
 80006f4:	4b7f      	ldr	r3, [pc, #508]	; (80008f4 <main+0x61c>)
 80006f6:	881b      	ldrh	r3, [r3, #0]
 80006f8:	ee07 3a90 	vmov	s15, r3
 80006fc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000700:	ee85 6b07 	vdiv.f64	d6, d5, d7
 8000704:	4b7e      	ldr	r3, [pc, #504]	; (8000900 <main+0x628>)
 8000706:	ed93 7b00 	vldr	d7, [r3]
 800070a:	ee36 7b07 	vadd.f64	d7, d6, d7
 800070e:	4b7c      	ldr	r3, [pc, #496]	; (8000900 <main+0x628>)
 8000710:	ed83 7b00 	vstr	d7, [r3]
	  			  for(int i = 0; i < midPointCount;i++){
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	3301      	adds	r3, #1
 8000718:	603b      	str	r3, [r7, #0]
 800071a:	4b76      	ldr	r3, [pc, #472]	; (80008f4 <main+0x61c>)
 800071c:	881b      	ldrh	r3, [r3, #0]
 800071e:	461a      	mov	r2, r3
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	4293      	cmp	r3, r2
 8000724:	dbb5      	blt.n	8000692 <main+0x3ba>
	  			  }
	  			  state = PairPhase;
 8000726:	4b77      	ldr	r3, [pc, #476]	; (8000904 <main+0x62c>)
 8000728:	2203      	movs	r2, #3
 800072a:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  break;
 800072c:	e0d9      	b.n	80008e2 <main+0x60a>
	  	  case PairPhase:
	  		  TDOA12 = fmod(meanShiftS2-meanShiftS1+period/2,period) - period/2;
 800072e:	4b76      	ldr	r3, [pc, #472]	; (8000908 <main+0x630>)
 8000730:	ed93 6b00 	vldr	d6, [r3]
 8000734:	4b75      	ldr	r3, [pc, #468]	; (800090c <main+0x634>)
 8000736:	ed93 7b00 	vldr	d7, [r3]
 800073a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800073e:	4b6e      	ldr	r3, [pc, #440]	; (80008f8 <main+0x620>)
 8000740:	ed93 5b00 	vldr	d5, [r3]
 8000744:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8000748:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800074c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8000750:	4b69      	ldr	r3, [pc, #420]	; (80008f8 <main+0x620>)
 8000752:	ed93 6b00 	vldr	d6, [r3]
 8000756:	eeb0 1b46 	vmov.f64	d1, d6
 800075a:	eeb0 0b47 	vmov.f64	d0, d7
 800075e:	f002 fb2f 	bl	8002dc0 <fmod>
 8000762:	eeb0 5b40 	vmov.f64	d5, d0
 8000766:	4b64      	ldr	r3, [pc, #400]	; (80008f8 <main+0x620>)
 8000768:	ed93 6b00 	vldr	d6, [r3]
 800076c:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8000770:	ee86 7b04 	vdiv.f64	d7, d6, d4
 8000774:	ee35 7b47 	vsub.f64	d7, d5, d7
 8000778:	4b65      	ldr	r3, [pc, #404]	; (8000910 <main+0x638>)
 800077a:	ed83 7b00 	vstr	d7, [r3]
	  		  TDOA13 = fmod(meanShiftS3-meanShiftS1+period/2,period) - period/2;
 800077e:	4b60      	ldr	r3, [pc, #384]	; (8000900 <main+0x628>)
 8000780:	ed93 6b00 	vldr	d6, [r3]
 8000784:	4b61      	ldr	r3, [pc, #388]	; (800090c <main+0x634>)
 8000786:	ed93 7b00 	vldr	d7, [r3]
 800078a:	ee36 6b47 	vsub.f64	d6, d6, d7
 800078e:	4b5a      	ldr	r3, [pc, #360]	; (80008f8 <main+0x620>)
 8000790:	ed93 5b00 	vldr	d5, [r3]
 8000794:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 8000798:	ee85 7b04 	vdiv.f64	d7, d5, d4
 800079c:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007a0:	4b55      	ldr	r3, [pc, #340]	; (80008f8 <main+0x620>)
 80007a2:	ed93 6b00 	vldr	d6, [r3]
 80007a6:	eeb0 1b46 	vmov.f64	d1, d6
 80007aa:	eeb0 0b47 	vmov.f64	d0, d7
 80007ae:	f002 fb07 	bl	8002dc0 <fmod>
 80007b2:	eeb0 5b40 	vmov.f64	d5, d0
 80007b6:	4b50      	ldr	r3, [pc, #320]	; (80008f8 <main+0x620>)
 80007b8:	ed93 6b00 	vldr	d6, [r3]
 80007bc:	eeb0 4b00 	vmov.f64	d4, #0	; 0x40000000  2.0
 80007c0:	ee86 7b04 	vdiv.f64	d7, d6, d4
 80007c4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80007c8:	4b52      	ldr	r3, [pc, #328]	; (8000914 <main+0x63c>)
 80007ca:	ed83 7b00 	vstr	d7, [r3]
	  		  TDOA12mean = TDOA12mean + TDOA12;
 80007ce:	4b52      	ldr	r3, [pc, #328]	; (8000918 <main+0x640>)
 80007d0:	ed93 6b00 	vldr	d6, [r3]
 80007d4:	4b4e      	ldr	r3, [pc, #312]	; (8000910 <main+0x638>)
 80007d6:	ed93 7b00 	vldr	d7, [r3]
 80007da:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007de:	4b4e      	ldr	r3, [pc, #312]	; (8000918 <main+0x640>)
 80007e0:	ed83 7b00 	vstr	d7, [r3]
	  		  TDOA13mean = TDOA13mean + TDOA13;
 80007e4:	4b4d      	ldr	r3, [pc, #308]	; (800091c <main+0x644>)
 80007e6:	ed93 6b00 	vldr	d6, [r3]
 80007ea:	4b4a      	ldr	r3, [pc, #296]	; (8000914 <main+0x63c>)
 80007ec:	ed93 7b00 	vldr	d7, [r3]
 80007f0:	ee36 7b07 	vadd.f64	d7, d6, d7
 80007f4:	4b49      	ldr	r3, [pc, #292]	; (800091c <main+0x644>)
 80007f6:	ed83 7b00 	vstr	d7, [r3]
	  		  TDOACount = TDOACount + 1;
 80007fa:	4b49      	ldr	r3, [pc, #292]	; (8000920 <main+0x648>)
 80007fc:	881b      	ldrh	r3, [r3, #0]
 80007fe:	3301      	adds	r3, #1
 8000800:	b29a      	uxth	r2, r3
 8000802:	4b47      	ldr	r3, [pc, #284]	; (8000920 <main+0x648>)
 8000804:	801a      	strh	r2, [r3, #0]
	  		  if(TDOACount == 3){
 8000806:	4b46      	ldr	r3, [pc, #280]	; (8000920 <main+0x648>)
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	2b03      	cmp	r3, #3
 800080c:	d124      	bne.n	8000858 <main+0x580>
	  			  TDOA12mean = TDOA12mean/3;
 800080e:	4b42      	ldr	r3, [pc, #264]	; (8000918 <main+0x640>)
 8000810:	ed93 6b00 	vldr	d6, [r3]
 8000814:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8000818:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800081c:	4b3e      	ldr	r3, [pc, #248]	; (8000918 <main+0x640>)
 800081e:	ed83 7b00 	vstr	d7, [r3]
	  			  TDOA13mean = TDOA13mean/3;
 8000822:	4b3e      	ldr	r3, [pc, #248]	; (800091c <main+0x644>)
 8000824:	ed93 6b00 	vldr	d6, [r3]
 8000828:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 800082c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000830:	4b3a      	ldr	r3, [pc, #232]	; (800091c <main+0x644>)
 8000832:	ed83 7b00 	vstr	d7, [r3]
	  			  TDOACount = 0;
 8000836:	4b3a      	ldr	r3, [pc, #232]	; (8000920 <main+0x648>)
 8000838:	2200      	movs	r2, #0
 800083a:	801a      	strh	r2, [r3, #0]
	  			  TDOA12mean = 0;
 800083c:	4936      	ldr	r1, [pc, #216]	; (8000918 <main+0x640>)
 800083e:	f04f 0200 	mov.w	r2, #0
 8000842:	f04f 0300 	mov.w	r3, #0
 8000846:	e9c1 2300 	strd	r2, r3, [r1]
	  			  TDOA13mean = 0;
 800084a:	4934      	ldr	r1, [pc, #208]	; (800091c <main+0x644>)
 800084c:	f04f 0200 	mov.w	r2, #0
 8000850:	f04f 0300 	mov.w	r3, #0
 8000854:	e9c1 2300 	strd	r2, r3, [r1]
	  		  }
	  		  state = Transmit;
 8000858:	4b2a      	ldr	r3, [pc, #168]	; (8000904 <main+0x62c>)
 800085a:	2204      	movs	r2, #4
 800085c:	701a      	strb	r2, [r3, #0]
	  		  break;
 800085e:	e041      	b.n	80008e4 <main+0x60c>
	  	  case Transmit:

	  		  state = S1_Estimation;
 8000860:	4b28      	ldr	r3, [pc, #160]	; (8000904 <main+0x62c>)
 8000862:	2200      	movs	r2, #0
 8000864:	701a      	strb	r2, [r3, #0]
	  		  meanShiftS1 = 0;
 8000866:	4929      	ldr	r1, [pc, #164]	; (800090c <main+0x634>)
 8000868:	f04f 0200 	mov.w	r2, #0
 800086c:	f04f 0300 	mov.w	r3, #0
 8000870:	e9c1 2300 	strd	r2, r3, [r1]
	  		  meanShiftS2 = 0;
 8000874:	4924      	ldr	r1, [pc, #144]	; (8000908 <main+0x630>)
 8000876:	f04f 0200 	mov.w	r2, #0
 800087a:	f04f 0300 	mov.w	r3, #0
 800087e:	e9c1 2300 	strd	r2, r3, [r1]
	  		  meanShiftS3 = 0;
 8000882:	491f      	ldr	r1, [pc, #124]	; (8000900 <main+0x628>)
 8000884:	f04f 0200 	mov.w	r2, #0
 8000888:	f04f 0300 	mov.w	r3, #0
 800088c:	e9c1 2300 	strd	r2, r3, [r1]
	  		  ts1.riseCount = 0;
 8000890:	4a24      	ldr	r2, [pc, #144]	; (8000924 <main+0x64c>)
 8000892:	f649 4340 	movw	r3, #40000	; 0x9c40
 8000896:	4413      	add	r3, r2
 8000898:	2200      	movs	r2, #0
 800089a:	801a      	strh	r2, [r3, #0]
	  		  ts1.fallCount = 0;
 800089c:	4a21      	ldr	r2, [pc, #132]	; (8000924 <main+0x64c>)
 800089e:	f649 4342 	movw	r3, #40002	; 0x9c42
 80008a2:	4413      	add	r3, r2
 80008a4:	2200      	movs	r2, #0
 80008a6:	801a      	strh	r2, [r3, #0]
	  		  ts2.riseCount = 0;
 80008a8:	4a1f      	ldr	r2, [pc, #124]	; (8000928 <main+0x650>)
 80008aa:	f649 4340 	movw	r3, #40000	; 0x9c40
 80008ae:	4413      	add	r3, r2
 80008b0:	2200      	movs	r2, #0
 80008b2:	801a      	strh	r2, [r3, #0]
	  		  ts2.fallCount = 0;
 80008b4:	4a1c      	ldr	r2, [pc, #112]	; (8000928 <main+0x650>)
 80008b6:	f649 4342 	movw	r3, #40002	; 0x9c42
 80008ba:	4413      	add	r3, r2
 80008bc:	2200      	movs	r2, #0
 80008be:	801a      	strh	r2, [r3, #0]
			  ts3.riseCount = 0;
 80008c0:	4a09      	ldr	r2, [pc, #36]	; (80008e8 <main+0x610>)
 80008c2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80008c6:	4413      	add	r3, r2
 80008c8:	2200      	movs	r2, #0
 80008ca:	801a      	strh	r2, [r3, #0]
			  ts3.fallCount = 0;
 80008cc:	4a06      	ldr	r2, [pc, #24]	; (80008e8 <main+0x610>)
 80008ce:	f649 4342 	movw	r3, #40002	; 0x9c42
 80008d2:	4413      	add	r3, r2
 80008d4:	2200      	movs	r2, #0
 80008d6:	801a      	strh	r2, [r3, #0]
//			  __HAL_RCC_TIM2_FORCE_RESET();
//			  MX_TIM2_Init();
//			  __HAL_TIM_ENABLE(&htim2);
	  		  //Turn on interrupts
	  		  break;
 80008d8:	e004      	b.n	80008e4 <main+0x60c>
	  		  break;
 80008da:	bf00      	nop
 80008dc:	e51e      	b.n	800031c <main+0x44>
	  		  break;
 80008de:	bf00      	nop
 80008e0:	e51c      	b.n	800031c <main+0x44>
	  		  break;
 80008e2:	bf00      	nop
	  switch(state){
 80008e4:	e51a      	b.n	800031c <main+0x44>
 80008e6:	bf00      	nop
 80008e8:	24009d08 	.word	0x24009d08
 80008ec:	2401395c 	.word	0x2401395c
 80008f0:	24009cf0 	.word	0x24009cf0
 80008f4:	240000a2 	.word	0x240000a2
 80008f8:	24000000 	.word	0x24000000
 80008fc:	240000b0 	.word	0x240000b0
 8000900:	24035ca8 	.word	0x24035ca8
 8000904:	2400009c 	.word	0x2400009c
 8000908:	2402c018 	.word	0x2402c018
 800090c:	24013950 	.word	0x24013950
 8000910:	24018780 	.word	0x24018780
 8000914:	24009ce8 	.word	0x24009ce8
 8000918:	2402c010 	.word	0x2402c010
 800091c:	240000a8 	.word	0x240000a8
 8000920:	24035ca4 	.word	0x24035ca4
 8000924:	24018788 	.word	0x24018788
 8000928:	240223cc 	.word	0x240223cc

0800092c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b09c      	sub	sp, #112	; 0x70
 8000930:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000932:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000936:	224c      	movs	r2, #76	; 0x4c
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f002 fa36 	bl	8002dac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000940:	1d3b      	adds	r3, r7, #4
 8000942:	2220      	movs	r2, #32
 8000944:	2100      	movs	r1, #0
 8000946:	4618      	mov	r0, r3
 8000948:	f002 fa30 	bl	8002dac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800094c:	2002      	movs	r0, #2
 800094e:	f000 ff7d 	bl	800184c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	4b31      	ldr	r3, [pc, #196]	; (8000a1c <SystemClock_Config+0xf0>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	4a30      	ldr	r2, [pc, #192]	; (8000a1c <SystemClock_Config+0xf0>)
 800095c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000960:	6193      	str	r3, [r2, #24]
 8000962:	4b2e      	ldr	r3, [pc, #184]	; (8000a1c <SystemClock_Config+0xf0>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800096a:	603b      	str	r3, [r7, #0]
 800096c:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <SystemClock_Config+0xf4>)
 800096e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000970:	4a2b      	ldr	r2, [pc, #172]	; (8000a20 <SystemClock_Config+0xf4>)
 8000972:	f043 0301 	orr.w	r3, r3, #1
 8000976:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000978:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <SystemClock_Config+0xf4>)
 800097a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000984:	bf00      	nop
 8000986:	4b25      	ldr	r3, [pc, #148]	; (8000a1c <SystemClock_Config+0xf0>)
 8000988:	699b      	ldr	r3, [r3, #24]
 800098a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800098e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000992:	d1f8      	bne.n	8000986 <SystemClock_Config+0x5a>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000994:	2302      	movs	r3, #2
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000998:	2301      	movs	r3, #1
 800099a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800099c:	2340      	movs	r3, #64	; 0x40
 800099e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a0:	2302      	movs	r3, #2
 80009a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009a4:	2300      	movs	r3, #0
 80009a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009a8:	2304      	movs	r3, #4
 80009aa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 80009ac:	233c      	movs	r3, #60	; 0x3c
 80009ae:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009b0:	2302      	movs	r3, #2
 80009b2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009b8:	2302      	movs	r3, #2
 80009ba:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009bc:	230c      	movs	r3, #12
 80009be:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 ff77 	bl	80018c0 <HAL_RCC_OscConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80009d8:	f000 f9ea 	bl	8000db0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009dc:	233f      	movs	r3, #63	; 0x3f
 80009de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009e0:	2303      	movs	r3, #3
 80009e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009e8:	2308      	movs	r3, #8
 80009ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009ec:	2340      	movs	r3, #64	; 0x40
 80009ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009f0:	2340      	movs	r3, #64	; 0x40
 80009f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009fa:	2340      	movs	r3, #64	; 0x40
 80009fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2104      	movs	r1, #4
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 fb6c 	bl	80020e0 <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000a0e:	f000 f9cf 	bl	8000db0 <Error_Handler>
  }
}
 8000a12:	bf00      	nop
 8000a14:	3770      	adds	r7, #112	; 0x70
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	58024800 	.word	0x58024800
 8000a20:	58000400 	.word	0x58000400

08000a24 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a2a:	f107 0310 	add.w	r3, r7, #16
 8000a2e:	2200      	movs	r2, #0
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	605a      	str	r2, [r3, #4]
 8000a34:	609a      	str	r2, [r3, #8]
 8000a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a42:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <MX_TIM2_Init+0x98>)
 8000a44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <MX_TIM2_Init+0x98>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_TIM2_Init+0x98>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000a56:	4b19      	ldr	r3, [pc, #100]	; (8000abc <MX_TIM2_Init+0x98>)
 8000a58:	f04f 32ff 	mov.w	r2, #4294967295
 8000a5c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5e:	4b17      	ldr	r3, [pc, #92]	; (8000abc <MX_TIM2_Init+0x98>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a64:	4b15      	ldr	r3, [pc, #84]	; (8000abc <MX_TIM2_Init+0x98>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a6a:	4814      	ldr	r0, [pc, #80]	; (8000abc <MX_TIM2_Init+0x98>)
 8000a6c:	f001 fe68 	bl	8002740 <HAL_TIM_Base_Init>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000a76:	f000 f99b 	bl	8000db0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	4619      	mov	r1, r3
 8000a86:	480d      	ldr	r0, [pc, #52]	; (8000abc <MX_TIM2_Init+0x98>)
 8000a88:	f001 feb2 	bl	80027f0 <HAL_TIM_ConfigClockSource>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000a92:	f000 f98d 	bl	8000db0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	; (8000abc <MX_TIM2_Init+0x98>)
 8000aa4:	f002 f8d0 	bl	8002c48 <HAL_TIMEx_MasterConfigSynchronization>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000aae:	f000 f97f 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3720      	adds	r7, #32
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	24035c58 	.word	0x24035c58

08000ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad6:	4b3d      	ldr	r3, [pc, #244]	; (8000bcc <MX_GPIO_Init+0x10c>)
 8000ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000adc:	4a3b      	ldr	r2, [pc, #236]	; (8000bcc <MX_GPIO_Init+0x10c>)
 8000ade:	f043 0304 	orr.w	r3, r3, #4
 8000ae2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae6:	4b39      	ldr	r3, [pc, #228]	; (8000bcc <MX_GPIO_Init+0x10c>)
 8000ae8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af4:	4b35      	ldr	r3, [pc, #212]	; (8000bcc <MX_GPIO_Init+0x10c>)
 8000af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000afa:	4a34      	ldr	r2, [pc, #208]	; (8000bcc <MX_GPIO_Init+0x10c>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b04:	4b31      	ldr	r3, [pc, #196]	; (8000bcc <MX_GPIO_Init+0x10c>)
 8000b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	4b2e      	ldr	r3, [pc, #184]	; (8000bcc <MX_GPIO_Init+0x10c>)
 8000b14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b18:	4a2c      	ldr	r2, [pc, #176]	; (8000bcc <MX_GPIO_Init+0x10c>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b22:	4b2a      	ldr	r3, [pc, #168]	; (8000bcc <MX_GPIO_Init+0x10c>)
 8000b24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : S1Rise_Pin */
  GPIO_InitStruct.Pin = S1Rise_Pin;
 8000b30:	2301      	movs	r3, #1
 8000b32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b34:	4b26      	ldr	r3, [pc, #152]	; (8000bd0 <MX_GPIO_Init+0x110>)
 8000b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(S1Rise_GPIO_Port, &GPIO_InitStruct);
 8000b3c:	f107 030c 	add.w	r3, r7, #12
 8000b40:	4619      	mov	r1, r3
 8000b42:	4824      	ldr	r0, [pc, #144]	; (8000bd4 <MX_GPIO_Init+0x114>)
 8000b44:	f000 fcac 	bl	80014a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : S1Fall_Pin */
  GPIO_InitStruct.Pin = S1Fall_Pin;
 8000b48:	2308      	movs	r3, #8
 8000b4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b4c:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <MX_GPIO_Init+0x118>)
 8000b4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(S1Fall_GPIO_Port, &GPIO_InitStruct);
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4820      	ldr	r0, [pc, #128]	; (8000bdc <MX_GPIO_Init+0x11c>)
 8000b5c:	f000 fca0 	bl	80014a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b60:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b66:	2302      	movs	r3, #2
 8000b68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000b72:	2304      	movs	r3, #4
 8000b74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b76:	f107 030c 	add.w	r3, r7, #12
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4818      	ldr	r0, [pc, #96]	; (8000be0 <MX_GPIO_Init+0x120>)
 8000b7e:	f000 fc8f 	bl	80014a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b82:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b86:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8000b94:	2306      	movs	r3, #6
 8000b96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	480f      	ldr	r0, [pc, #60]	; (8000bdc <MX_GPIO_Init+0x11c>)
 8000ba0:	f000 fc7e 	bl	80014a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	2006      	movs	r0, #6
 8000baa:	f000 fc36 	bl	800141a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bae:	2006      	movs	r0, #6
 8000bb0:	f000 fc4d 	bl	800144e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	2009      	movs	r0, #9
 8000bba:	f000 fc2e 	bl	800141a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000bbe:	2009      	movs	r0, #9
 8000bc0:	f000 fc45 	bl	800144e <HAL_NVIC_EnableIRQ>

}
 8000bc4:	bf00      	nop
 8000bc6:	3720      	adds	r7, #32
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	58024400 	.word	0x58024400
 8000bd0:	11110000 	.word	0x11110000
 8000bd4:	58020800 	.word	0x58020800
 8000bd8:	11210000 	.word	0x11210000
 8000bdc:	58020000 	.word	0x58020000
 8000be0:	58020400 	.word	0x58020400

08000be4 <Sensor_Multiplex_Control>:

/* USER CODE BEGIN 4 */
void Sensor_Multiplex_Control(void){
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
	if(ts->fallCount == SAMPLE_SIZE && ts->riseCount == SAMPLE_SIZE)
 8000be8:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <Sensor_Multiplex_Control+0x78>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	f649 4342 	movw	r3, #40002	; 0x9c42
 8000bf0:	4413      	add	r3, r2
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d129      	bne.n	8000c50 <Sensor_Multiplex_Control+0x6c>
 8000bfc:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <Sensor_Multiplex_Control+0x78>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	f649 4340 	movw	r3, #40000	; 0x9c40
 8000c04:	4413      	add	r3, r2
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d11f      	bne.n	8000c50 <Sensor_Multiplex_Control+0x6c>
	{
		switch(samplingSensor){
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <Sensor_Multiplex_Control+0x7c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d014      	beq.n	8000c42 <Sensor_Multiplex_Control+0x5e>
 8000c18:	2b02      	cmp	r3, #2
 8000c1a:	dc1a      	bgt.n	8000c52 <Sensor_Multiplex_Control+0x6e>
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d002      	beq.n	8000c26 <Sensor_Multiplex_Control+0x42>
 8000c20:	2b01      	cmp	r3, #1
 8000c22:	d007      	beq.n	8000c34 <Sensor_Multiplex_Control+0x50>
			ts = &ts1;
			//Switch Multiplexer
			break;
		}
	}
}
 8000c24:	e015      	b.n	8000c52 <Sensor_Multiplex_Control+0x6e>
			samplingSensor = 1;
 8000c26:	4b0e      	ldr	r3, [pc, #56]	; (8000c60 <Sensor_Multiplex_Control+0x7c>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	701a      	strb	r2, [r3, #0]
			ts = &ts2;
 8000c2c:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <Sensor_Multiplex_Control+0x78>)
 8000c2e:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <Sensor_Multiplex_Control+0x80>)
 8000c30:	601a      	str	r2, [r3, #0]
			break;
 8000c32:	e00e      	b.n	8000c52 <Sensor_Multiplex_Control+0x6e>
			samplingSensor = 2;
 8000c34:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <Sensor_Multiplex_Control+0x7c>)
 8000c36:	2202      	movs	r2, #2
 8000c38:	701a      	strb	r2, [r3, #0]
			ts = &ts3;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <Sensor_Multiplex_Control+0x78>)
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <Sensor_Multiplex_Control+0x84>)
 8000c3e:	601a      	str	r2, [r3, #0]
			break;
 8000c40:	e007      	b.n	8000c52 <Sensor_Multiplex_Control+0x6e>
			samplingSensor = 0;
 8000c42:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <Sensor_Multiplex_Control+0x7c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
			ts = &ts1;
 8000c48:	4b04      	ldr	r3, [pc, #16]	; (8000c5c <Sensor_Multiplex_Control+0x78>)
 8000c4a:	4a08      	ldr	r2, [pc, #32]	; (8000c6c <Sensor_Multiplex_Control+0x88>)
 8000c4c:	601a      	str	r2, [r3, #0]
			break;
 8000c4e:	e000      	b.n	8000c52 <Sensor_Multiplex_Control+0x6e>
	}
 8000c50:	bf00      	nop
}
 8000c52:	bf00      	nop
 8000c54:	46bd      	mov	sp, r7
 8000c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5a:	4770      	bx	lr
 8000c5c:	24013958 	.word	0x24013958
 8000c60:	2400009d 	.word	0x2400009d
 8000c64:	240223cc 	.word	0x240223cc
 8000c68:	24009d08 	.word	0x24009d08
 8000c6c:	24018788 	.word	0x24018788

08000c70 <Get_Mid_Points>:

void Get_Mid_Points(Timestamps* t, uint32_t* midpoints){
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	6039      	str	r1, [r7, #0]
	cntRising = 1;
 8000c7a:	4b49      	ldr	r3, [pc, #292]	; (8000da0 <Get_Mid_Points+0x130>)
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	801a      	strh	r2, [r3, #0]
	cntFalling = 1;
 8000c80:	4b48      	ldr	r3, [pc, #288]	; (8000da4 <Get_Mid_Points+0x134>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	801a      	strh	r2, [r3, #0]
	midPointCount = 0;
 8000c86:	4b48      	ldr	r3, [pc, #288]	; (8000da8 <Get_Mid_Points+0x138>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	801a      	strh	r2, [r3, #0]
	while(cntRising <= SAMPLE_SIZE-1 && cntFalling < SAMPLE_SIZE-1){
 8000c8c:	e075      	b.n	8000d7a <Get_Mid_Points+0x10a>
		dist = t->fallStamps[cntFalling] - t->riseStamps[cntRising];
 8000c8e:	4b45      	ldr	r3, [pc, #276]	; (8000da4 <Get_Mid_Points+0x134>)
 8000c90:	881b      	ldrh	r3, [r3, #0]
 8000c92:	4619      	mov	r1, r3
 8000c94:	687a      	ldr	r2, [r7, #4]
 8000c96:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c9a:	440b      	add	r3, r1
 8000c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca0:	b29a      	uxth	r2, r3
 8000ca2:	4b3f      	ldr	r3, [pc, #252]	; (8000da0 <Get_Mid_Points+0x130>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	b29a      	uxth	r2, r3
 8000cb4:	4b3d      	ldr	r3, [pc, #244]	; (8000dac <Get_Mid_Points+0x13c>)
 8000cb6:	801a      	strh	r2, [r3, #0]
		while(dist < 0 && t->fallStamps[cntFalling] < SAMPLE_SIZE-1){
 8000cb8:	bf00      	nop
			cntFalling = cntFalling + 1;
			dist = t->fallStamps[cntFalling] - t->riseStamps[cntRising];
		}

		while(cntFalling < SAMPLE_SIZE-1 && t->fallStamps[cntFalling+1] - t->riseStamps[cntRising] <= dist){
 8000cba:	e01a      	b.n	8000cf2 <Get_Mid_Points+0x82>
			cntFalling = cntFalling + 1;
 8000cbc:	4b39      	ldr	r3, [pc, #228]	; (8000da4 <Get_Mid_Points+0x134>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	b29a      	uxth	r2, r3
 8000cc4:	4b37      	ldr	r3, [pc, #220]	; (8000da4 <Get_Mid_Points+0x134>)
 8000cc6:	801a      	strh	r2, [r3, #0]
			dist = t->fallStamps[cntFalling] - t->riseStamps[cntRising];
 8000cc8:	4b36      	ldr	r3, [pc, #216]	; (8000da4 <Get_Mid_Points+0x134>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000cd4:	440b      	add	r3, r1
 8000cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cda:	b29a      	uxth	r2, r3
 8000cdc:	4b30      	ldr	r3, [pc, #192]	; (8000da0 <Get_Mid_Points+0x130>)
 8000cde:	881b      	ldrh	r3, [r3, #0]
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	4b2f      	ldr	r3, [pc, #188]	; (8000dac <Get_Mid_Points+0x13c>)
 8000cf0:	801a      	strh	r2, [r3, #0]
		while(cntFalling < SAMPLE_SIZE-1 && t->fallStamps[cntFalling+1] - t->riseStamps[cntRising] <= dist){
 8000cf2:	4b2c      	ldr	r3, [pc, #176]	; (8000da4 <Get_Mid_Points+0x134>)
 8000cf4:	881b      	ldrh	r3, [r3, #0]
 8000cf6:	f241 3286 	movw	r2, #4998	; 0x1386
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d813      	bhi.n	8000d26 <Get_Mid_Points+0xb6>
 8000cfe:	4b29      	ldr	r3, [pc, #164]	; (8000da4 <Get_Mid_Points+0x134>)
 8000d00:	881b      	ldrh	r3, [r3, #0]
 8000d02:	1c59      	adds	r1, r3, #1
 8000d04:	687a      	ldr	r2, [r7, #4]
 8000d06:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d0a:	440b      	add	r3, r1
 8000d0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000d10:	4b23      	ldr	r3, [pc, #140]	; (8000da0 <Get_Mid_Points+0x130>)
 8000d12:	881b      	ldrh	r3, [r3, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	4a23      	ldr	r2, [pc, #140]	; (8000dac <Get_Mid_Points+0x13c>)
 8000d20:	8812      	ldrh	r2, [r2, #0]
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d9ca      	bls.n	8000cbc <Get_Mid_Points+0x4c>
		}
		if(dist >= 0){
			midpoints[midPointCount] = t->riseStamps[cntRising] + dist/2;
 8000d26:	4b1e      	ldr	r3, [pc, #120]	; (8000da0 <Get_Mid_Points+0x130>)
 8000d28:	881b      	ldrh	r3, [r3, #0]
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d32:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <Get_Mid_Points+0x13c>)
 8000d34:	881b      	ldrh	r3, [r3, #0]
 8000d36:	085b      	lsrs	r3, r3, #1
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <Get_Mid_Points+0x138>)
 8000d3e:	881b      	ldrh	r3, [r3, #0]
 8000d40:	009b      	lsls	r3, r3, #2
 8000d42:	6839      	ldr	r1, [r7, #0]
 8000d44:	440b      	add	r3, r1
 8000d46:	4402      	add	r2, r0
 8000d48:	601a      	str	r2, [r3, #0]
			if(cntRising < SAMPLE_SIZE-1 && cntFalling < SAMPLE_SIZE-1){
 8000d4a:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <Get_Mid_Points+0x130>)
 8000d4c:	881b      	ldrh	r3, [r3, #0]
 8000d4e:	f241 3286 	movw	r2, #4998	; 0x1386
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d811      	bhi.n	8000d7a <Get_Mid_Points+0x10a>
 8000d56:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <Get_Mid_Points+0x134>)
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	f241 3286 	movw	r2, #4998	; 0x1386
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d80b      	bhi.n	8000d7a <Get_Mid_Points+0x10a>
				cntRising = cntRising + 1;
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <Get_Mid_Points+0x130>)
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	3301      	adds	r3, #1
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	; (8000da0 <Get_Mid_Points+0x130>)
 8000d6c:	801a      	strh	r2, [r3, #0]
				midPointCount = midPointCount + 1;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <Get_Mid_Points+0x138>)
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	3301      	adds	r3, #1
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <Get_Mid_Points+0x138>)
 8000d78:	801a      	strh	r2, [r3, #0]
	while(cntRising <= SAMPLE_SIZE-1 && cntFalling < SAMPLE_SIZE-1){
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <Get_Mid_Points+0x130>)
 8000d7c:	881b      	ldrh	r3, [r3, #0]
 8000d7e:	f241 3287 	movw	r2, #4999	; 0x1387
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d806      	bhi.n	8000d94 <Get_Mid_Points+0x124>
 8000d86:	4b07      	ldr	r3, [pc, #28]	; (8000da4 <Get_Mid_Points+0x134>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	f241 3286 	movw	r2, #4998	; 0x1386
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	f67f af7d 	bls.w	8000c8e <Get_Mid_Points+0x1e>
			}
		}

	}
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	2400009e 	.word	0x2400009e
 8000da4:	240000a0 	.word	0x240000a0
 8000da8:	240000a2 	.word	0x240000a2
 8000dac:	24018778 	.word	0x24018778

08000db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db4:	b672      	cpsid	i
}
 8000db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <Error_Handler+0x8>
	...

08000dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_MspInit+0x30>)
 8000dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dc8:	4a08      	ldr	r2, [pc, #32]	; (8000dec <HAL_MspInit+0x30>)
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_MspInit+0x30>)
 8000dd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	58024400 	.word	0x58024400

08000df0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e00:	d10e      	bne.n	8000e20 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e02:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_TIM_Base_MspInit+0x3c>)
 8000e04:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e08:	4a08      	ldr	r2, [pc, #32]	; (8000e2c <HAL_TIM_Base_MspInit+0x3c>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000e12:	4b06      	ldr	r3, [pc, #24]	; (8000e2c <HAL_TIM_Base_MspInit+0x3c>)
 8000e14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e20:	bf00      	nop
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	58024400 	.word	0x58024400

08000e30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <NMI_Handler+0x4>

08000e36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e3a:	e7fe      	b.n	8000e3a <HardFault_Handler+0x4>

08000e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e40:	e7fe      	b.n	8000e40 <MemManage_Handler+0x4>

08000e42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <BusFault_Handler+0x4>

08000e48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <UsageFault_Handler+0x4>

08000e4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e7c:	f000 f9a2 	bl	80011c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	//Read the timer
	uint32_t counter = __HAL_TIM_GET_COUNTER(&htim2);
 8000e8a:	4b19      	ldr	r3, [pc, #100]	; (8000ef0 <EXTI0_IRQHandler+0x6c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e90:	607b      	str	r3, [r7, #4]
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e92:	2001      	movs	r0, #1
 8000e94:	f000 fcb4 	bl	8001800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  	  //Check if sampling buffer is not full
  	  if(ts->riseCount < SAMPLE_SIZE){
 8000e98:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <EXTI0_IRQHandler+0x70>)
 8000e9a:	681a      	ldr	r2, [r3, #0]
 8000e9c:	f649 4340 	movw	r3, #40000	; 0x9c40
 8000ea0:	4413      	add	r3, r2
 8000ea2:	881b      	ldrh	r3, [r3, #0]
 8000ea4:	f241 3287 	movw	r2, #4999	; 0x1387
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d81b      	bhi.n	8000ee4 <EXTI0_IRQHandler+0x60>
  		  	//Add another sample to the buffer
  			ts->riseStamps[ts->riseCount] = counter;
 8000eac:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <EXTI0_IRQHandler+0x70>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <EXTI0_IRQHandler+0x70>)
 8000eb2:	6819      	ldr	r1, [r3, #0]
 8000eb4:	f649 4340 	movw	r3, #40000	; 0x9c40
 8000eb8:	440b      	add	r3, r1
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  			ts->riseCount = ts->riseCount + 1;
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <EXTI0_IRQHandler+0x70>)
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	f649 4340 	movw	r3, #40000	; 0x9c40
 8000ecc:	4413      	add	r3, r2
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	4a08      	ldr	r2, [pc, #32]	; (8000ef4 <EXTI0_IRQHandler+0x70>)
 8000ed2:	6812      	ldr	r2, [r2, #0]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	b299      	uxth	r1, r3
 8000ed8:	f649 4340 	movw	r3, #40000	; 0x9c40
 8000edc:	4413      	add	r3, r2
 8000ede:	460a      	mov	r2, r1
 8000ee0:	801a      	strh	r2, [r3, #0]
  		  //HAL_NVIC_DisableIRQ(EXTI0_IRQn);
  		  //Switch sensor to sample
  		  Sensor_Multiplex_Control();
  	  }
  /* USER CODE END EXTI0_IRQn 1 */
}
 8000ee2:	e001      	b.n	8000ee8 <EXTI0_IRQHandler+0x64>
  		  Sensor_Multiplex_Control();
 8000ee4:	f7ff fe7e 	bl	8000be4 <Sensor_Multiplex_Control>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	24035c58 	.word	0x24035c58
 8000ef4:	24013958 	.word	0x24013958

08000ef8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
	//Read the timer
	uint32_t counter = __HAL_TIM_GET_COUNTER(&htim2);
 8000efe:	4b1b      	ldr	r3, [pc, #108]	; (8000f6c <EXTI3_IRQHandler+0x74>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f04:	607b      	str	r3, [r7, #4]
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000f06:	2008      	movs	r0, #8
 8000f08:	f000 fc7a 	bl	8001800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

	  //Check if sampling buffer is not full
	  if(ts->fallCount < SAMPLE_SIZE){
 8000f0c:	4b18      	ldr	r3, [pc, #96]	; (8000f70 <EXTI3_IRQHandler+0x78>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	f649 4342 	movw	r3, #40002	; 0x9c42
 8000f14:	4413      	add	r3, r2
 8000f16:	881b      	ldrh	r3, [r3, #0]
 8000f18:	f241 3287 	movw	r2, #4999	; 0x1387
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d81e      	bhi.n	8000f5e <EXTI3_IRQHandler+0x66>
		  //Add another sample to the buffer
		  ts->fallStamps[ts->fallCount] = counter;
 8000f20:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <EXTI3_IRQHandler+0x78>)
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	4b12      	ldr	r3, [pc, #72]	; (8000f70 <EXTI3_IRQHandler+0x78>)
 8000f26:	6819      	ldr	r1, [r3, #0]
 8000f28:	f649 4342 	movw	r3, #40002	; 0x9c42
 8000f2c:	440b      	add	r3, r1
 8000f2e:	881b      	ldrh	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f241 3388 	movw	r3, #5000	; 0x1388
 8000f36:	440b      	add	r3, r1
 8000f38:	6879      	ldr	r1, [r7, #4]
 8000f3a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  ts->fallCount = ts->fallCount + 1;
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <EXTI3_IRQHandler+0x78>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	f649 4342 	movw	r3, #40002	; 0x9c42
 8000f46:	4413      	add	r3, r2
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	4a09      	ldr	r2, [pc, #36]	; (8000f70 <EXTI3_IRQHandler+0x78>)
 8000f4c:	6812      	ldr	r2, [r2, #0]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	b299      	uxth	r1, r3
 8000f52:	f649 4342 	movw	r3, #40002	; 0x9c42
 8000f56:	4413      	add	r3, r2
 8000f58:	460a      	mov	r2, r1
 8000f5a:	801a      	strh	r2, [r3, #0]

  		  //Switch sensor to sample
		  Sensor_Multiplex_Control();
	  }
  /* USER CODE END EXTI3_IRQn 1 */
}
 8000f5c:	e001      	b.n	8000f62 <EXTI3_IRQHandler+0x6a>
		  Sensor_Multiplex_Control();
 8000f5e:	f7ff fe41 	bl	8000be4 <Sensor_Multiplex_Control>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	24035c58 	.word	0x24035c58
 8000f70:	24013958 	.word	0x24013958

08000f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f78:	4b39      	ldr	r3, [pc, #228]	; (8001060 <SystemInit+0xec>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7e:	4a38      	ldr	r2, [pc, #224]	; (8001060 <SystemInit+0xec>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000f88:	4b36      	ldr	r3, [pc, #216]	; (8001064 <SystemInit+0xf0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f003 030f 	and.w	r3, r3, #15
 8000f90:	2b06      	cmp	r3, #6
 8000f92:	d807      	bhi.n	8000fa4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000f94:	4b33      	ldr	r3, [pc, #204]	; (8001064 <SystemInit+0xf0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f023 030f 	bic.w	r3, r3, #15
 8000f9c:	4a31      	ldr	r2, [pc, #196]	; (8001064 <SystemInit+0xf0>)
 8000f9e:	f043 0307 	orr.w	r3, r3, #7
 8000fa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000fa4:	4b30      	ldr	r3, [pc, #192]	; (8001068 <SystemInit+0xf4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a2f      	ldr	r2, [pc, #188]	; (8001068 <SystemInit+0xf4>)
 8000faa:	f043 0301 	orr.w	r3, r3, #1
 8000fae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000fb0:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <SystemInit+0xf4>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000fb6:	4b2c      	ldr	r3, [pc, #176]	; (8001068 <SystemInit+0xf4>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	492b      	ldr	r1, [pc, #172]	; (8001068 <SystemInit+0xf4>)
 8000fbc:	4b2b      	ldr	r3, [pc, #172]	; (800106c <SystemInit+0xf8>)
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000fc2:	4b28      	ldr	r3, [pc, #160]	; (8001064 <SystemInit+0xf0>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f003 0308 	and.w	r3, r3, #8
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d007      	beq.n	8000fde <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000fce:	4b25      	ldr	r3, [pc, #148]	; (8001064 <SystemInit+0xf0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f023 030f 	bic.w	r3, r3, #15
 8000fd6:	4a23      	ldr	r2, [pc, #140]	; (8001064 <SystemInit+0xf0>)
 8000fd8:	f043 0307 	orr.w	r3, r3, #7
 8000fdc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000fde:	4b22      	ldr	r3, [pc, #136]	; (8001068 <SystemInit+0xf4>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000fe4:	4b20      	ldr	r3, [pc, #128]	; (8001068 <SystemInit+0xf4>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000fea:	4b1f      	ldr	r3, [pc, #124]	; (8001068 <SystemInit+0xf4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <SystemInit+0xf4>)
 8000ff2:	4a1f      	ldr	r2, [pc, #124]	; (8001070 <SystemInit+0xfc>)
 8000ff4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <SystemInit+0xf4>)
 8000ff8:	4a1e      	ldr	r2, [pc, #120]	; (8001074 <SystemInit+0x100>)
 8000ffa:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <SystemInit+0xf4>)
 8000ffe:	4a1e      	ldr	r2, [pc, #120]	; (8001078 <SystemInit+0x104>)
 8001000:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <SystemInit+0xf4>)
 8001004:	2200      	movs	r2, #0
 8001006:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <SystemInit+0xf4>)
 800100a:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <SystemInit+0x104>)
 800100c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800100e:	4b16      	ldr	r3, [pc, #88]	; (8001068 <SystemInit+0xf4>)
 8001010:	2200      	movs	r2, #0
 8001012:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <SystemInit+0xf4>)
 8001016:	4a18      	ldr	r2, [pc, #96]	; (8001078 <SystemInit+0x104>)
 8001018:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800101a:	4b13      	ldr	r3, [pc, #76]	; (8001068 <SystemInit+0xf4>)
 800101c:	2200      	movs	r2, #0
 800101e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <SystemInit+0xf4>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a10      	ldr	r2, [pc, #64]	; (8001068 <SystemInit+0xf4>)
 8001026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800102a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <SystemInit+0xf4>)
 800102e:	2200      	movs	r2, #0
 8001030:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001032:	4b12      	ldr	r3, [pc, #72]	; (800107c <SystemInit+0x108>)
 8001034:	681a      	ldr	r2, [r3, #0]
 8001036:	4b12      	ldr	r3, [pc, #72]	; (8001080 <SystemInit+0x10c>)
 8001038:	4013      	ands	r3, r2
 800103a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800103e:	d202      	bcs.n	8001046 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001040:	4b10      	ldr	r3, [pc, #64]	; (8001084 <SystemInit+0x110>)
 8001042:	2201      	movs	r2, #1
 8001044:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001046:	4b10      	ldr	r3, [pc, #64]	; (8001088 <SystemInit+0x114>)
 8001048:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800104c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800104e:	4b04      	ldr	r3, [pc, #16]	; (8001060 <SystemInit+0xec>)
 8001050:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001054:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00
 8001064:	52002000 	.word	0x52002000
 8001068:	58024400 	.word	0x58024400
 800106c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001070:	02020200 	.word	0x02020200
 8001074:	01ff0000 	.word	0x01ff0000
 8001078:	01010280 	.word	0x01010280
 800107c:	5c001000 	.word	0x5c001000
 8001080:	ffff0000 	.word	0xffff0000
 8001084:	51008108 	.word	0x51008108
 8001088:	52004000 	.word	0x52004000

0800108c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800108c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010c4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001090:	f7ff ff70 	bl	8000f74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001094:	480c      	ldr	r0, [pc, #48]	; (80010c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001096:	490d      	ldr	r1, [pc, #52]	; (80010cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001098:	4a0d      	ldr	r2, [pc, #52]	; (80010d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800109c:	e002      	b.n	80010a4 <LoopCopyDataInit>

0800109e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800109e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010a2:	3304      	adds	r3, #4

080010a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010a8:	d3f9      	bcc.n	800109e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010aa:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010ac:	4c0a      	ldr	r4, [pc, #40]	; (80010d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010b0:	e001      	b.n	80010b6 <LoopFillZerobss>

080010b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010b4:	3204      	adds	r2, #4

080010b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010b8:	d3fb      	bcc.n	80010b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ba:	f001 fe53 	bl	8002d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010be:	f7ff f90b 	bl	80002d8 <main>
  bx  lr
 80010c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010c4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010c8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010cc:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 80010d0:	08003088 	.word	0x08003088
  ldr r2, =_sbss
 80010d4:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 80010d8:	24035cb4 	.word	0x24035cb4

080010dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010dc:	e7fe      	b.n	80010dc <ADC3_IRQHandler>
	...

080010e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e6:	2003      	movs	r0, #3
 80010e8:	f000 f98c 	bl	8001404 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80010ec:	f001 f9ae 	bl	800244c <HAL_RCC_GetSysClockFreq>
 80010f0:	4602      	mov	r2, r0
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <HAL_Init+0x68>)
 80010f4:	699b      	ldr	r3, [r3, #24]
 80010f6:	0a1b      	lsrs	r3, r3, #8
 80010f8:	f003 030f 	and.w	r3, r3, #15
 80010fc:	4913      	ldr	r1, [pc, #76]	; (800114c <HAL_Init+0x6c>)
 80010fe:	5ccb      	ldrb	r3, [r1, r3]
 8001100:	f003 031f 	and.w	r3, r3, #31
 8001104:	fa22 f303 	lsr.w	r3, r2, r3
 8001108:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <HAL_Init+0x68>)
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	4a0e      	ldr	r2, [pc, #56]	; (800114c <HAL_Init+0x6c>)
 8001114:	5cd3      	ldrb	r3, [r2, r3]
 8001116:	f003 031f 	and.w	r3, r3, #31
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	fa22 f303 	lsr.w	r3, r2, r3
 8001120:	4a0b      	ldr	r2, [pc, #44]	; (8001150 <HAL_Init+0x70>)
 8001122:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <HAL_Init+0x74>)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800112a:	200f      	movs	r0, #15
 800112c:	f000 f814 	bl	8001158 <HAL_InitTick>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e002      	b.n	8001140 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800113a:	f7ff fe3f 	bl	8000dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	58024400 	.word	0x58024400
 800114c:	08003060 	.word	0x08003060
 8001150:	2400000c 	.word	0x2400000c
 8001154:	24000008 	.word	0x24000008

08001158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001160:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <HAL_InitTick+0x60>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e021      	b.n	80011b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800116c:	4b13      	ldr	r3, [pc, #76]	; (80011bc <HAL_InitTick+0x64>)
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <HAL_InitTick+0x60>)
 8001172:	781b      	ldrb	r3, [r3, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800117a:	fbb3 f3f1 	udiv	r3, r3, r1
 800117e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001182:	4618      	mov	r0, r3
 8001184:	f000 f97f 	bl	8001486 <HAL_SYSTICK_Config>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e00e      	b.n	80011b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b0f      	cmp	r3, #15
 8001196:	d80a      	bhi.n	80011ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001198:	2200      	movs	r2, #0
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	f04f 30ff 	mov.w	r0, #4294967295
 80011a0:	f000 f93b 	bl	800141a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011a4:	4a06      	ldr	r2, [pc, #24]	; (80011c0 <HAL_InitTick+0x68>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011aa:	2300      	movs	r3, #0
 80011ac:	e000      	b.n	80011b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	24000014 	.word	0x24000014
 80011bc:	24000008 	.word	0x24000008
 80011c0:	24000010 	.word	0x24000010

080011c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80011c8:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <HAL_IncTick+0x20>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <HAL_IncTick+0x24>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4413      	add	r3, r2
 80011d4:	4a04      	ldr	r2, [pc, #16]	; (80011e8 <HAL_IncTick+0x24>)
 80011d6:	6013      	str	r3, [r2, #0]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	24000014 	.word	0x24000014
 80011e8:	24035cb0 	.word	0x24035cb0

080011ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  return uwTick;
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <HAL_GetTick+0x14>)
 80011f2:	681b      	ldr	r3, [r3, #0]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	24035cb0 	.word	0x24035cb0

08001204 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001208:	4b03      	ldr	r3, [pc, #12]	; (8001218 <HAL_GetREVID+0x14>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	0c1b      	lsrs	r3, r3, #16
}
 800120e:	4618      	mov	r0, r3
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	5c001000 	.word	0x5c001000

0800121c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <__NVIC_SetPriorityGrouping+0x40>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001232:	68ba      	ldr	r2, [r7, #8]
 8001234:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001238:	4013      	ands	r3, r2
 800123a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <__NVIC_SetPriorityGrouping+0x44>)
 8001246:	4313      	orrs	r3, r2
 8001248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124a:	4a04      	ldr	r2, [pc, #16]	; (800125c <__NVIC_SetPriorityGrouping+0x40>)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	60d3      	str	r3, [r2, #12]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00
 8001260:	05fa0000 	.word	0x05fa0000

08001264 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <__NVIC_GetPriorityGrouping+0x18>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	f003 0307 	and.w	r3, r3, #7
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800128a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800128e:	2b00      	cmp	r3, #0
 8001290:	db0b      	blt.n	80012aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001292:	88fb      	ldrh	r3, [r7, #6]
 8001294:	f003 021f 	and.w	r2, r3, #31
 8001298:	4907      	ldr	r1, [pc, #28]	; (80012b8 <__NVIC_EnableIRQ+0x38>)
 800129a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800129e:	095b      	lsrs	r3, r3, #5
 80012a0:	2001      	movs	r0, #1
 80012a2:	fa00 f202 	lsl.w	r2, r0, r2
 80012a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012aa:	bf00      	nop
 80012ac:	370c      	adds	r7, #12
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	e000e100 	.word	0xe000e100

080012bc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80012c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	db12      	blt.n	80012f4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ce:	88fb      	ldrh	r3, [r7, #6]
 80012d0:	f003 021f 	and.w	r2, r3, #31
 80012d4:	490a      	ldr	r1, [pc, #40]	; (8001300 <__NVIC_DisableIRQ+0x44>)
 80012d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012da:	095b      	lsrs	r3, r3, #5
 80012dc:	2001      	movs	r0, #1
 80012de:	fa00 f202 	lsl.w	r2, r0, r2
 80012e2:	3320      	adds	r3, #32
 80012e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80012e8:	f3bf 8f4f 	dsb	sy
}
 80012ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012ee:	f3bf 8f6f 	isb	sy
}
 80012f2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	e000e100 	.word	0xe000e100

08001304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001310:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001314:	2b00      	cmp	r3, #0
 8001316:	db0a      	blt.n	800132e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	b2da      	uxtb	r2, r3
 800131c:	490c      	ldr	r1, [pc, #48]	; (8001350 <__NVIC_SetPriority+0x4c>)
 800131e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001322:	0112      	lsls	r2, r2, #4
 8001324:	b2d2      	uxtb	r2, r2
 8001326:	440b      	add	r3, r1
 8001328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800132c:	e00a      	b.n	8001344 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	b2da      	uxtb	r2, r3
 8001332:	4908      	ldr	r1, [pc, #32]	; (8001354 <__NVIC_SetPriority+0x50>)
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	f003 030f 	and.w	r3, r3, #15
 800133a:	3b04      	subs	r3, #4
 800133c:	0112      	lsls	r2, r2, #4
 800133e:	b2d2      	uxtb	r2, r2
 8001340:	440b      	add	r3, r1
 8001342:	761a      	strb	r2, [r3, #24]
}
 8001344:	bf00      	nop
 8001346:	370c      	adds	r7, #12
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000e100 	.word	0xe000e100
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001358:	b480      	push	{r7}
 800135a:	b089      	sub	sp, #36	; 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	60b9      	str	r1, [r7, #8]
 8001362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0307 	and.w	r3, r3, #7
 800136a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f1c3 0307 	rsb	r3, r3, #7
 8001372:	2b04      	cmp	r3, #4
 8001374:	bf28      	it	cs
 8001376:	2304      	movcs	r3, #4
 8001378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	3304      	adds	r3, #4
 800137e:	2b06      	cmp	r3, #6
 8001380:	d902      	bls.n	8001388 <NVIC_EncodePriority+0x30>
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	3b03      	subs	r3, #3
 8001386:	e000      	b.n	800138a <NVIC_EncodePriority+0x32>
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800138c:	f04f 32ff 	mov.w	r2, #4294967295
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43da      	mvns	r2, r3
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013a0:	f04f 31ff 	mov.w	r1, #4294967295
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	fa01 f303 	lsl.w	r3, r1, r3
 80013aa:	43d9      	mvns	r1, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	4313      	orrs	r3, r2
         );
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3724      	adds	r7, #36	; 0x24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
	...

080013c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013d0:	d301      	bcc.n	80013d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013d2:	2301      	movs	r3, #1
 80013d4:	e00f      	b.n	80013f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <SysTick_Config+0x40>)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3b01      	subs	r3, #1
 80013dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013de:	210f      	movs	r1, #15
 80013e0:	f04f 30ff 	mov.w	r0, #4294967295
 80013e4:	f7ff ff8e 	bl	8001304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013e8:	4b05      	ldr	r3, [pc, #20]	; (8001400 <SysTick_Config+0x40>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ee:	4b04      	ldr	r3, [pc, #16]	; (8001400 <SysTick_Config+0x40>)
 80013f0:	2207      	movs	r2, #7
 80013f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013f4:	2300      	movs	r3, #0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	e000e010 	.word	0xe000e010

08001404 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff ff05 	bl	800121c <__NVIC_SetPriorityGrouping>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b086      	sub	sp, #24
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	60b9      	str	r1, [r7, #8]
 8001424:	607a      	str	r2, [r7, #4]
 8001426:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001428:	f7ff ff1c 	bl	8001264 <__NVIC_GetPriorityGrouping>
 800142c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800142e:	687a      	ldr	r2, [r7, #4]
 8001430:	68b9      	ldr	r1, [r7, #8]
 8001432:	6978      	ldr	r0, [r7, #20]
 8001434:	f7ff ff90 	bl	8001358 <NVIC_EncodePriority>
 8001438:	4602      	mov	r2, r0
 800143a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff5f 	bl	8001304 <__NVIC_SetPriority>
}
 8001446:	bf00      	nop
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b082      	sub	sp, #8
 8001452:	af00      	add	r7, sp, #0
 8001454:	4603      	mov	r3, r0
 8001456:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001458:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff0f 	bl	8001280 <__NVIC_EnableIRQ>
}
 8001462:	bf00      	nop
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}

0800146a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	b082      	sub	sp, #8
 800146e:	af00      	add	r7, sp, #0
 8001470:	4603      	mov	r3, r0
 8001472:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001474:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff ff1f 	bl	80012bc <__NVIC_DisableIRQ>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b082      	sub	sp, #8
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ff96 	bl	80013c0 <SysTick_Config>
 8001494:	4603      	mov	r3, r0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
	...

080014a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b089      	sub	sp, #36	; 0x24
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014aa:	2300      	movs	r3, #0
 80014ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80014ae:	4b89      	ldr	r3, [pc, #548]	; (80016d4 <HAL_GPIO_Init+0x234>)
 80014b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014b2:	e194      	b.n	80017de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	2101      	movs	r1, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa01 f303 	lsl.w	r3, r1, r3
 80014c0:	4013      	ands	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 8186 	beq.w	80017d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d00b      	beq.n	80014ec <HAL_GPIO_Init+0x4c>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2b02      	cmp	r3, #2
 80014da:	d007      	beq.n	80014ec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014e0:	2b11      	cmp	r3, #17
 80014e2:	d003      	beq.n	80014ec <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b12      	cmp	r3, #18
 80014ea:	d130      	bne.n	800154e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	2203      	movs	r2, #3
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	43db      	mvns	r3, r3
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	4013      	ands	r3, r2
 8001502:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	68da      	ldr	r2, [r3, #12]
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001522:	2201      	movs	r2, #1
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43db      	mvns	r3, r3
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	4013      	ands	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	091b      	lsrs	r3, r3, #4
 8001538:	f003 0201 	and.w	r2, r3, #1
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4313      	orrs	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	69ba      	ldr	r2, [r7, #24]
 800154c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	68db      	ldr	r3, [r3, #12]
 8001552:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	2203      	movs	r2, #3
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d003      	beq.n	800158e <HAL_GPIO_Init+0xee>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b12      	cmp	r3, #18
 800158c:	d123      	bne.n	80015d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	08da      	lsrs	r2, r3, #3
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	3208      	adds	r2, #8
 8001596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800159a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	220f      	movs	r2, #15
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	4013      	ands	r3, r2
 80015b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	691a      	ldr	r2, [r3, #16]
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	08da      	lsrs	r2, r3, #3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	3208      	adds	r2, #8
 80015d0:	69b9      	ldr	r1, [r7, #24]
 80015d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	2203      	movs	r2, #3
 80015e2:	fa02 f303 	lsl.w	r3, r2, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	69ba      	ldr	r2, [r7, #24]
 80015ea:	4013      	ands	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 0203 	and.w	r2, r3, #3
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 80e0 	beq.w	80017d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001618:	4b2f      	ldr	r3, [pc, #188]	; (80016d8 <HAL_GPIO_Init+0x238>)
 800161a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800161e:	4a2e      	ldr	r2, [pc, #184]	; (80016d8 <HAL_GPIO_Init+0x238>)
 8001620:	f043 0302 	orr.w	r3, r3, #2
 8001624:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001628:	4b2b      	ldr	r3, [pc, #172]	; (80016d8 <HAL_GPIO_Init+0x238>)
 800162a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001636:	4a29      	ldr	r2, [pc, #164]	; (80016dc <HAL_GPIO_Init+0x23c>)
 8001638:	69fb      	ldr	r3, [r7, #28]
 800163a:	089b      	lsrs	r3, r3, #2
 800163c:	3302      	adds	r3, #2
 800163e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001644:	69fb      	ldr	r3, [r7, #28]
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	220f      	movs	r2, #15
 800164e:	fa02 f303 	lsl.w	r3, r2, r3
 8001652:	43db      	mvns	r3, r3
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	4013      	ands	r3, r2
 8001658:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <HAL_GPIO_Init+0x240>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d052      	beq.n	8001708 <HAL_GPIO_Init+0x268>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	4a1f      	ldr	r2, [pc, #124]	; (80016e4 <HAL_GPIO_Init+0x244>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d031      	beq.n	80016ce <HAL_GPIO_Init+0x22e>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a1e      	ldr	r2, [pc, #120]	; (80016e8 <HAL_GPIO_Init+0x248>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d02b      	beq.n	80016ca <HAL_GPIO_Init+0x22a>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a1d      	ldr	r2, [pc, #116]	; (80016ec <HAL_GPIO_Init+0x24c>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d025      	beq.n	80016c6 <HAL_GPIO_Init+0x226>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a1c      	ldr	r2, [pc, #112]	; (80016f0 <HAL_GPIO_Init+0x250>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d01f      	beq.n	80016c2 <HAL_GPIO_Init+0x222>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a1b      	ldr	r2, [pc, #108]	; (80016f4 <HAL_GPIO_Init+0x254>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d019      	beq.n	80016be <HAL_GPIO_Init+0x21e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a1a      	ldr	r2, [pc, #104]	; (80016f8 <HAL_GPIO_Init+0x258>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d013      	beq.n	80016ba <HAL_GPIO_Init+0x21a>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a19      	ldr	r2, [pc, #100]	; (80016fc <HAL_GPIO_Init+0x25c>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d00d      	beq.n	80016b6 <HAL_GPIO_Init+0x216>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a18      	ldr	r2, [pc, #96]	; (8001700 <HAL_GPIO_Init+0x260>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d007      	beq.n	80016b2 <HAL_GPIO_Init+0x212>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a17      	ldr	r2, [pc, #92]	; (8001704 <HAL_GPIO_Init+0x264>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d101      	bne.n	80016ae <HAL_GPIO_Init+0x20e>
 80016aa:	2309      	movs	r3, #9
 80016ac:	e02d      	b.n	800170a <HAL_GPIO_Init+0x26a>
 80016ae:	230a      	movs	r3, #10
 80016b0:	e02b      	b.n	800170a <HAL_GPIO_Init+0x26a>
 80016b2:	2308      	movs	r3, #8
 80016b4:	e029      	b.n	800170a <HAL_GPIO_Init+0x26a>
 80016b6:	2307      	movs	r3, #7
 80016b8:	e027      	b.n	800170a <HAL_GPIO_Init+0x26a>
 80016ba:	2306      	movs	r3, #6
 80016bc:	e025      	b.n	800170a <HAL_GPIO_Init+0x26a>
 80016be:	2305      	movs	r3, #5
 80016c0:	e023      	b.n	800170a <HAL_GPIO_Init+0x26a>
 80016c2:	2304      	movs	r3, #4
 80016c4:	e021      	b.n	800170a <HAL_GPIO_Init+0x26a>
 80016c6:	2303      	movs	r3, #3
 80016c8:	e01f      	b.n	800170a <HAL_GPIO_Init+0x26a>
 80016ca:	2302      	movs	r3, #2
 80016cc:	e01d      	b.n	800170a <HAL_GPIO_Init+0x26a>
 80016ce:	2301      	movs	r3, #1
 80016d0:	e01b      	b.n	800170a <HAL_GPIO_Init+0x26a>
 80016d2:	bf00      	nop
 80016d4:	58000080 	.word	0x58000080
 80016d8:	58024400 	.word	0x58024400
 80016dc:	58000400 	.word	0x58000400
 80016e0:	58020000 	.word	0x58020000
 80016e4:	58020400 	.word	0x58020400
 80016e8:	58020800 	.word	0x58020800
 80016ec:	58020c00 	.word	0x58020c00
 80016f0:	58021000 	.word	0x58021000
 80016f4:	58021400 	.word	0x58021400
 80016f8:	58021800 	.word	0x58021800
 80016fc:	58021c00 	.word	0x58021c00
 8001700:	58022000 	.word	0x58022000
 8001704:	58022400 	.word	0x58022400
 8001708:	2300      	movs	r3, #0
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	f002 0203 	and.w	r2, r2, #3
 8001710:	0092      	lsls	r2, r2, #2
 8001712:	4093      	lsls	r3, r2
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800171a:	4938      	ldr	r1, [pc, #224]	; (80017fc <HAL_GPIO_Init+0x35c>)
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3302      	adds	r3, #2
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	43db      	mvns	r3, r3
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	4013      	ands	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	4313      	orrs	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	43db      	mvns	r3, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4013      	ands	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d003      	beq.n	8001776 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	4313      	orrs	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800177c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d003      	beq.n	80017a2 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80017a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80017aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80017d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	3301      	adds	r3, #1
 80017dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	fa22 f303 	lsr.w	r3, r2, r3
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	f47f ae63 	bne.w	80014b4 <HAL_GPIO_Init+0x14>
  }
}
 80017ee:	bf00      	nop
 80017f0:	bf00      	nop
 80017f2:	3724      	adds	r7, #36	; 0x24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	58000400 	.word	0x58000400

08001800 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 800180a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800180e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	4013      	ands	r3, r2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d008      	beq.n	800182c <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800181a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001824:	88fb      	ldrh	r3, [r7, #6]
 8001826:	4618      	mov	r0, r3
 8001828:	f000 f804 	bl	8001834 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800182c:	bf00      	nop
 800182e:	3708      	adds	r7, #8
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}

08001834 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	4603      	mov	r3, r0
 800183c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001854:	4b19      	ldr	r3, [pc, #100]	; (80018bc <HAL_PWREx_ConfigSupply+0x70>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b04      	cmp	r3, #4
 800185e:	d00a      	beq.n	8001876 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001860:	4b16      	ldr	r3, [pc, #88]	; (80018bc <HAL_PWREx_ConfigSupply+0x70>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f003 0307 	and.w	r3, r3, #7
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	429a      	cmp	r2, r3
 800186c:	d001      	beq.n	8001872 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e01f      	b.n	80018b2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	e01d      	b.n	80018b2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <HAL_PWREx_ConfigSupply+0x70>)
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	f023 0207 	bic.w	r2, r3, #7
 800187e:	490f      	ldr	r1, [pc, #60]	; (80018bc <HAL_PWREx_ConfigSupply+0x70>)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4313      	orrs	r3, r2
 8001884:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001886:	f7ff fcb1 	bl	80011ec <HAL_GetTick>
 800188a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800188c:	e009      	b.n	80018a2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800188e:	f7ff fcad 	bl	80011ec <HAL_GetTick>
 8001892:	4602      	mov	r2, r0
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	1ad3      	subs	r3, r2, r3
 8001898:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800189c:	d901      	bls.n	80018a2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e007      	b.n	80018b2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018a2:	4b06      	ldr	r3, [pc, #24]	; (80018bc <HAL_PWREx_ConfigSupply+0x70>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018ae:	d1ee      	bne.n	800188e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80018b0:	2300      	movs	r3, #0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3710      	adds	r7, #16
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	58024800 	.word	0x58024800

080018c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08c      	sub	sp, #48	; 0x30
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d101      	bne.n	80018d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	e3ff      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 8087 	beq.w	80019ee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018e0:	4b99      	ldr	r3, [pc, #612]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 80018e2:	691b      	ldr	r3, [r3, #16]
 80018e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018ea:	4b97      	ldr	r3, [pc, #604]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 80018ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80018f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f2:	2b10      	cmp	r3, #16
 80018f4:	d007      	beq.n	8001906 <HAL_RCC_OscConfig+0x46>
 80018f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f8:	2b18      	cmp	r3, #24
 80018fa:	d110      	bne.n	800191e <HAL_RCC_OscConfig+0x5e>
 80018fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018fe:	f003 0303 	and.w	r3, r3, #3
 8001902:	2b02      	cmp	r3, #2
 8001904:	d10b      	bne.n	800191e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001906:	4b90      	ldr	r3, [pc, #576]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d06c      	beq.n	80019ec <HAL_RCC_OscConfig+0x12c>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d168      	bne.n	80019ec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800191a:	2301      	movs	r3, #1
 800191c:	e3d9      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001926:	d106      	bne.n	8001936 <HAL_RCC_OscConfig+0x76>
 8001928:	4b87      	ldr	r3, [pc, #540]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a86      	ldr	r2, [pc, #536]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 800192e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	e02e      	b.n	8001994 <HAL_RCC_OscConfig+0xd4>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0x98>
 800193e:	4b82      	ldr	r3, [pc, #520]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a81      	ldr	r2, [pc, #516]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b7f      	ldr	r3, [pc, #508]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a7e      	ldr	r2, [pc, #504]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001950:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e01d      	b.n	8001994 <HAL_RCC_OscConfig+0xd4>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001960:	d10c      	bne.n	800197c <HAL_RCC_OscConfig+0xbc>
 8001962:	4b79      	ldr	r3, [pc, #484]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a78      	ldr	r2, [pc, #480]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	4b76      	ldr	r3, [pc, #472]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a75      	ldr	r2, [pc, #468]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e00b      	b.n	8001994 <HAL_RCC_OscConfig+0xd4>
 800197c:	4b72      	ldr	r3, [pc, #456]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a71      	ldr	r2, [pc, #452]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b6f      	ldr	r3, [pc, #444]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a6e      	ldr	r2, [pc, #440]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 800198e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d013      	beq.n	80019c4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff fc26 	bl	80011ec <HAL_GetTick>
 80019a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019a4:	f7ff fc22 	bl	80011ec <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b64      	cmp	r3, #100	; 0x64
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e38d      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019b6:	4b64      	ldr	r3, [pc, #400]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0xe4>
 80019c2:	e014      	b.n	80019ee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c4:	f7ff fc12 	bl	80011ec <HAL_GetTick>
 80019c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019ca:	e008      	b.n	80019de <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019cc:	f7ff fc0e 	bl	80011ec <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	2b64      	cmp	r3, #100	; 0x64
 80019d8:	d901      	bls.n	80019de <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019da:	2303      	movs	r3, #3
 80019dc:	e379      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019de:	4b5a      	ldr	r3, [pc, #360]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d1f0      	bne.n	80019cc <HAL_RCC_OscConfig+0x10c>
 80019ea:	e000      	b.n	80019ee <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0302 	and.w	r3, r3, #2
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 80ae 	beq.w	8001b58 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019fc:	4b52      	ldr	r3, [pc, #328]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a04:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a06:	4b50      	ldr	r3, [pc, #320]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0a:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d007      	beq.n	8001a22 <HAL_RCC_OscConfig+0x162>
 8001a12:	6a3b      	ldr	r3, [r7, #32]
 8001a14:	2b18      	cmp	r3, #24
 8001a16:	d13a      	bne.n	8001a8e <HAL_RCC_OscConfig+0x1ce>
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	f003 0303 	and.w	r3, r3, #3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d135      	bne.n	8001a8e <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a22:	4b49      	ldr	r3, [pc, #292]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0304 	and.w	r3, r3, #4
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d005      	beq.n	8001a3a <HAL_RCC_OscConfig+0x17a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	68db      	ldr	r3, [r3, #12]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d101      	bne.n	8001a3a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e34b      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a3a:	f7ff fbe3 	bl	8001204 <HAL_GetREVID>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d817      	bhi.n	8001a78 <HAL_RCC_OscConfig+0x1b8>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	691b      	ldr	r3, [r3, #16]
 8001a4c:	2b40      	cmp	r3, #64	; 0x40
 8001a4e:	d108      	bne.n	8001a62 <HAL_RCC_OscConfig+0x1a2>
 8001a50:	4b3d      	ldr	r3, [pc, #244]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001a58:	4a3b      	ldr	r2, [pc, #236]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a5e:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a60:	e07a      	b.n	8001b58 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a62:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	691b      	ldr	r3, [r3, #16]
 8001a6e:	031b      	lsls	r3, r3, #12
 8001a70:	4935      	ldr	r1, [pc, #212]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a76:	e06f      	b.n	8001b58 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a78:	4b33      	ldr	r3, [pc, #204]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	061b      	lsls	r3, r3, #24
 8001a86:	4930      	ldr	r1, [pc, #192]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a8c:	e064      	b.n	8001b58 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d045      	beq.n	8001b22 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a96:	4b2c      	ldr	r3, [pc, #176]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f023 0219 	bic.w	r2, r3, #25
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	4929      	ldr	r1, [pc, #164]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fba0 	bl	80011ec <HAL_GetTick>
 8001aac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ab0:	f7ff fb9c 	bl	80011ec <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e307      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ac2:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d0f0      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ace:	f7ff fb99 	bl	8001204 <HAL_GetREVID>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d817      	bhi.n	8001b0c <HAL_RCC_OscConfig+0x24c>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	691b      	ldr	r3, [r3, #16]
 8001ae0:	2b40      	cmp	r3, #64	; 0x40
 8001ae2:	d108      	bne.n	8001af6 <HAL_RCC_OscConfig+0x236>
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001aec:	4a16      	ldr	r2, [pc, #88]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001aee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af2:	6053      	str	r3, [r2, #4]
 8001af4:	e030      	b.n	8001b58 <HAL_RCC_OscConfig+0x298>
 8001af6:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	031b      	lsls	r3, r3, #12
 8001b04:	4910      	ldr	r1, [pc, #64]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	604b      	str	r3, [r1, #4]
 8001b0a:	e025      	b.n	8001b58 <HAL_RCC_OscConfig+0x298>
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	061b      	lsls	r3, r3, #24
 8001b1a:	490b      	ldr	r1, [pc, #44]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	604b      	str	r3, [r1, #4]
 8001b20:	e01a      	b.n	8001b58 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b22:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a08      	ldr	r2, [pc, #32]	; (8001b48 <HAL_RCC_OscConfig+0x288>)
 8001b28:	f023 0301 	bic.w	r3, r3, #1
 8001b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2e:	f7ff fb5d 	bl	80011ec <HAL_GetTick>
 8001b32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b34:	e00a      	b.n	8001b4c <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b36:	f7ff fb59 	bl	80011ec <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d903      	bls.n	8001b4c <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e2c4      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
 8001b48:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b4c:	4ba4      	ldr	r3, [pc, #656]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1ee      	bne.n	8001b36 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0310 	and.w	r3, r3, #16
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80a9 	beq.w	8001cb8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b66:	4b9e      	ldr	r3, [pc, #632]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001b68:	691b      	ldr	r3, [r3, #16]
 8001b6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b6e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b70:	4b9b      	ldr	r3, [pc, #620]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b74:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	2b08      	cmp	r3, #8
 8001b7a:	d007      	beq.n	8001b8c <HAL_RCC_OscConfig+0x2cc>
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	2b18      	cmp	r3, #24
 8001b80:	d13a      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x338>
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	f003 0303 	and.w	r3, r3, #3
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d135      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b8c:	4b94      	ldr	r3, [pc, #592]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x2e4>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	69db      	ldr	r3, [r3, #28]
 8001b9c:	2b80      	cmp	r3, #128	; 0x80
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e296      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ba4:	f7ff fb2e 	bl	8001204 <HAL_GetREVID>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d817      	bhi.n	8001be2 <HAL_RCC_OscConfig+0x322>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	2b20      	cmp	r3, #32
 8001bb8:	d108      	bne.n	8001bcc <HAL_RCC_OscConfig+0x30c>
 8001bba:	4b89      	ldr	r3, [pc, #548]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001bc2:	4a87      	ldr	r2, [pc, #540]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001bc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001bc8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bca:	e075      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bcc:	4b84      	ldr	r3, [pc, #528]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	069b      	lsls	r3, r3, #26
 8001bda:	4981      	ldr	r1, [pc, #516]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001be0:	e06a      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001be2:	4b7f      	ldr	r3, [pc, #508]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	061b      	lsls	r3, r3, #24
 8001bf0:	497b      	ldr	r1, [pc, #492]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bf6:	e05f      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d042      	beq.n	8001c86 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c00:	4b77      	ldr	r3, [pc, #476]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a76      	ldr	r2, [pc, #472]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7ff faee 	bl	80011ec <HAL_GetTick>
 8001c10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c14:	f7ff faea 	bl	80011ec <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e255      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c26:	4b6e      	ldr	r3, [pc, #440]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c32:	f7ff fae7 	bl	8001204 <HAL_GetREVID>
 8001c36:	4603      	mov	r3, r0
 8001c38:	f241 0203 	movw	r2, #4099	; 0x1003
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d817      	bhi.n	8001c70 <HAL_RCC_OscConfig+0x3b0>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	2b20      	cmp	r3, #32
 8001c46:	d108      	bne.n	8001c5a <HAL_RCC_OscConfig+0x39a>
 8001c48:	4b65      	ldr	r3, [pc, #404]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001c50:	4a63      	ldr	r2, [pc, #396]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001c52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001c56:	6053      	str	r3, [r2, #4]
 8001c58:	e02e      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3f8>
 8001c5a:	4b61      	ldr	r3, [pc, #388]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a1b      	ldr	r3, [r3, #32]
 8001c66:	069b      	lsls	r3, r3, #26
 8001c68:	495d      	ldr	r1, [pc, #372]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	604b      	str	r3, [r1, #4]
 8001c6e:	e023      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3f8>
 8001c70:	4b5b      	ldr	r3, [pc, #364]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a1b      	ldr	r3, [r3, #32]
 8001c7c:	061b      	lsls	r3, r3, #24
 8001c7e:	4958      	ldr	r1, [pc, #352]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001c80:	4313      	orrs	r3, r2
 8001c82:	60cb      	str	r3, [r1, #12]
 8001c84:	e018      	b.n	8001cb8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c86:	4b56      	ldr	r3, [pc, #344]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a55      	ldr	r2, [pc, #340]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c92:	f7ff faab 	bl	80011ec <HAL_GetTick>
 8001c96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c9a:	f7ff faa7 	bl	80011ec <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e212      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001cac:	4b4c      	ldr	r3, [pc, #304]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d1f0      	bne.n	8001c9a <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d036      	beq.n	8001d32 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d019      	beq.n	8001d00 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ccc:	4b44      	ldr	r3, [pc, #272]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001cce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cd0:	4a43      	ldr	r2, [pc, #268]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd8:	f7ff fa88 	bl	80011ec <HAL_GetTick>
 8001cdc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ce0:	f7ff fa84 	bl	80011ec <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e1ef      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cf2:	4b3b      	ldr	r3, [pc, #236]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d0f0      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x420>
 8001cfe:	e018      	b.n	8001d32 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d00:	4b37      	ldr	r3, [pc, #220]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001d02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d04:	4a36      	ldr	r2, [pc, #216]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001d06:	f023 0301 	bic.w	r3, r3, #1
 8001d0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d0c:	f7ff fa6e 	bl	80011ec <HAL_GetTick>
 8001d10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d14:	f7ff fa6a 	bl	80011ec <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e1d5      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d26:	4b2e      	ldr	r3, [pc, #184]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0320 	and.w	r3, r3, #32
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d036      	beq.n	8001dac <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d019      	beq.n	8001d7a <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d46:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a25      	ldr	r2, [pc, #148]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001d4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d50:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d52:	f7ff fa4b 	bl	80011ec <HAL_GetTick>
 8001d56:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001d5a:	f7ff fa47 	bl	80011ec <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e1b2      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001d6c:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x49a>
 8001d78:	e018      	b.n	8001dac <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d7a:	4b19      	ldr	r3, [pc, #100]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a18      	ldr	r2, [pc, #96]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001d80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d86:	f7ff fa31 	bl	80011ec <HAL_GetTick>
 8001d8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d8c:	e008      	b.n	8001da0 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001d8e:	f7ff fa2d 	bl	80011ec <HAL_GetTick>
 8001d92:	4602      	mov	r2, r0
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	2b02      	cmp	r3, #2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e198      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001da0:	4b0f      	ldr	r3, [pc, #60]	; (8001de0 <HAL_RCC_OscConfig+0x520>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1f0      	bne.n	8001d8e <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0304 	and.w	r3, r3, #4
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 8085 	beq.w	8001ec4 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <HAL_RCC_OscConfig+0x524>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a09      	ldr	r2, [pc, #36]	; (8001de4 <HAL_RCC_OscConfig+0x524>)
 8001dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001dc6:	f7ff fa11 	bl	80011ec <HAL_GetTick>
 8001dca:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dcc:	e00c      	b.n	8001de8 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001dce:	f7ff fa0d 	bl	80011ec <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b64      	cmp	r3, #100	; 0x64
 8001dda:	d905      	bls.n	8001de8 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e178      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
 8001de0:	58024400 	.word	0x58024400
 8001de4:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001de8:	4b96      	ldr	r3, [pc, #600]	; (8002044 <HAL_RCC_OscConfig+0x784>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0ec      	beq.n	8001dce <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b01      	cmp	r3, #1
 8001dfa:	d106      	bne.n	8001e0a <HAL_RCC_OscConfig+0x54a>
 8001dfc:	4b92      	ldr	r3, [pc, #584]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e00:	4a91      	ldr	r2, [pc, #580]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	6713      	str	r3, [r2, #112]	; 0x70
 8001e08:	e02d      	b.n	8001e66 <HAL_RCC_OscConfig+0x5a6>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	689b      	ldr	r3, [r3, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d10c      	bne.n	8001e2c <HAL_RCC_OscConfig+0x56c>
 8001e12:	4b8d      	ldr	r3, [pc, #564]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e16:	4a8c      	ldr	r2, [pc, #560]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e18:	f023 0301 	bic.w	r3, r3, #1
 8001e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e1e:	4b8a      	ldr	r3, [pc, #552]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e22:	4a89      	ldr	r2, [pc, #548]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e24:	f023 0304 	bic.w	r3, r3, #4
 8001e28:	6713      	str	r3, [r2, #112]	; 0x70
 8001e2a:	e01c      	b.n	8001e66 <HAL_RCC_OscConfig+0x5a6>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	2b05      	cmp	r3, #5
 8001e32:	d10c      	bne.n	8001e4e <HAL_RCC_OscConfig+0x58e>
 8001e34:	4b84      	ldr	r3, [pc, #528]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e38:	4a83      	ldr	r2, [pc, #524]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e3a:	f043 0304 	orr.w	r3, r3, #4
 8001e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e40:	4b81      	ldr	r3, [pc, #516]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e44:	4a80      	ldr	r2, [pc, #512]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e46:	f043 0301 	orr.w	r3, r3, #1
 8001e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e4c:	e00b      	b.n	8001e66 <HAL_RCC_OscConfig+0x5a6>
 8001e4e:	4b7e      	ldr	r3, [pc, #504]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e52:	4a7d      	ldr	r2, [pc, #500]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e54:	f023 0301 	bic.w	r3, r3, #1
 8001e58:	6713      	str	r3, [r2, #112]	; 0x70
 8001e5a:	4b7b      	ldr	r3, [pc, #492]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e5e:	4a7a      	ldr	r2, [pc, #488]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e60:	f023 0304 	bic.w	r3, r3, #4
 8001e64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d015      	beq.n	8001e9a <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e6e:	f7ff f9bd 	bl	80011ec <HAL_GetTick>
 8001e72:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e74:	e00a      	b.n	8001e8c <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e76:	f7ff f9b9 	bl	80011ec <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e122      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e8c:	4b6e      	ldr	r3, [pc, #440]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0ee      	beq.n	8001e76 <HAL_RCC_OscConfig+0x5b6>
 8001e98:	e014      	b.n	8001ec4 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e9a:	f7ff f9a7 	bl	80011ec <HAL_GetTick>
 8001e9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ea0:	e00a      	b.n	8001eb8 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea2:	f7ff f9a3 	bl	80011ec <HAL_GetTick>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eaa:	1ad3      	subs	r3, r2, r3
 8001eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e10c      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001eb8:	4b63      	ldr	r3, [pc, #396]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d1ee      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	f000 8101 	beq.w	80020d0 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001ece:	4b5e      	ldr	r3, [pc, #376]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001ed6:	2b18      	cmp	r3, #24
 8001ed8:	f000 80bc 	beq.w	8002054 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	f040 8095 	bne.w	8002010 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ee6:	4b58      	ldr	r3, [pc, #352]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a57      	ldr	r2, [pc, #348]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001eec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ef0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef2:	f7ff f97b 	bl	80011ec <HAL_GetTick>
 8001ef6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001efa:	f7ff f977 	bl	80011ec <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b02      	cmp	r3, #2
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e0e2      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f0c:	4b4e      	ldr	r3, [pc, #312]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1f0      	bne.n	8001efa <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f18:	4b4b      	ldr	r3, [pc, #300]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001f1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f1c:	4b4b      	ldr	r3, [pc, #300]	; (800204c <HAL_RCC_OscConfig+0x78c>)
 8001f1e:	4013      	ands	r3, r2
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f28:	0112      	lsls	r2, r2, #4
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	4946      	ldr	r1, [pc, #280]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	628b      	str	r3, [r1, #40]	; 0x28
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	3b01      	subs	r3, #1
 8001f38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f40:	3b01      	subs	r3, #1
 8001f42:	025b      	lsls	r3, r3, #9
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f4c:	3b01      	subs	r3, #1
 8001f4e:	041b      	lsls	r3, r3, #16
 8001f50:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5a:	3b01      	subs	r3, #1
 8001f5c:	061b      	lsls	r3, r3, #24
 8001f5e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001f62:	4939      	ldr	r1, [pc, #228]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001f68:	4b37      	ldr	r3, [pc, #220]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f6c:	4a36      	ldr	r2, [pc, #216]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001f6e:	f023 0301 	bic.w	r3, r3, #1
 8001f72:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001f74:	4b34      	ldr	r3, [pc, #208]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001f76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f78:	4b35      	ldr	r3, [pc, #212]	; (8002050 <HAL_RCC_OscConfig+0x790>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f80:	00d2      	lsls	r2, r2, #3
 8001f82:	4931      	ldr	r1, [pc, #196]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001f88:	4b2f      	ldr	r3, [pc, #188]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8c:	f023 020c 	bic.w	r2, r3, #12
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f94:	492c      	ldr	r1, [pc, #176]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f9a:	4b2b      	ldr	r3, [pc, #172]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9e:	f023 0202 	bic.w	r2, r3, #2
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	4928      	ldr	r1, [pc, #160]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001fac:	4b26      	ldr	r3, [pc, #152]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb0:	4a25      	ldr	r2, [pc, #148]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001fb8:	4b23      	ldr	r3, [pc, #140]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbc:	4a22      	ldr	r2, [pc, #136]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001fbe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001fc4:	4b20      	ldr	r3, [pc, #128]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc8:	4a1f      	ldr	r2, [pc, #124]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001fca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001fd0:	4b1d      	ldr	r3, [pc, #116]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd4:	4a1c      	ldr	r2, [pc, #112]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001fd6:	f043 0301 	orr.w	r3, r3, #1
 8001fda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fdc:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a19      	ldr	r2, [pc, #100]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8001fe2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fe6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fe8:	f7ff f900 	bl	80011ec <HAL_GetTick>
 8001fec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff0:	f7ff f8fc 	bl	80011ec <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e067      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002002:	4b11      	ldr	r3, [pc, #68]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d0f0      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x730>
 800200e:	e05f      	b.n	80020d0 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002010:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0c      	ldr	r2, [pc, #48]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8002016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800201a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201c:	f7ff f8e6 	bl	80011ec <HAL_GetTick>
 8002020:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002024:	f7ff f8e2 	bl	80011ec <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e04d      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002036:	4b04      	ldr	r3, [pc, #16]	; (8002048 <HAL_RCC_OscConfig+0x788>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x764>
 8002042:	e045      	b.n	80020d0 <HAL_RCC_OscConfig+0x810>
 8002044:	58024800 	.word	0x58024800
 8002048:	58024400 	.word	0x58024400
 800204c:	fffffc0c 	.word	0xfffffc0c
 8002050:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002054:	4b21      	ldr	r3, [pc, #132]	; (80020dc <HAL_RCC_OscConfig+0x81c>)
 8002056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002058:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800205a:	4b20      	ldr	r3, [pc, #128]	; (80020dc <HAL_RCC_OscConfig+0x81c>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	2b01      	cmp	r3, #1
 8002066:	d031      	beq.n	80020cc <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	f003 0203 	and.w	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002072:	429a      	cmp	r2, r3
 8002074:	d12a      	bne.n	80020cc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002082:	429a      	cmp	r2, r3
 8002084:	d122      	bne.n	80020cc <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002090:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002092:	429a      	cmp	r2, r3
 8002094:	d11a      	bne.n	80020cc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	0a5b      	lsrs	r3, r3, #9
 800209a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d111      	bne.n	80020cc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	0c1b      	lsrs	r3, r3, #16
 80020ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d108      	bne.n	80020cc <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	0e1b      	lsrs	r3, r3, #24
 80020be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020c6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d001      	beq.n	80020d0 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e000      	b.n	80020d2 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3730      	adds	r7, #48	; 0x30
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	58024400 	.word	0x58024400

080020e0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e19c      	b.n	800242e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020f4:	4b8a      	ldr	r3, [pc, #552]	; (8002320 <HAL_RCC_ClockConfig+0x240>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 030f 	and.w	r3, r3, #15
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d910      	bls.n	8002124 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002102:	4b87      	ldr	r3, [pc, #540]	; (8002320 <HAL_RCC_ClockConfig+0x240>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f023 020f 	bic.w	r2, r3, #15
 800210a:	4985      	ldr	r1, [pc, #532]	; (8002320 <HAL_RCC_ClockConfig+0x240>)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	4313      	orrs	r3, r2
 8002110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002112:	4b83      	ldr	r3, [pc, #524]	; (8002320 <HAL_RCC_ClockConfig+0x240>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e184      	b.n	800242e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d010      	beq.n	8002152 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	4b7b      	ldr	r3, [pc, #492]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800213c:	429a      	cmp	r2, r3
 800213e:	d908      	bls.n	8002152 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002140:	4b78      	ldr	r3, [pc, #480]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	4975      	ldr	r1, [pc, #468]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 800214e:	4313      	orrs	r3, r2
 8002150:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 0308 	and.w	r3, r3, #8
 800215a:	2b00      	cmp	r3, #0
 800215c:	d010      	beq.n	8002180 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	695a      	ldr	r2, [r3, #20]
 8002162:	4b70      	ldr	r3, [pc, #448]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800216a:	429a      	cmp	r2, r3
 800216c:	d908      	bls.n	8002180 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800216e:	4b6d      	ldr	r3, [pc, #436]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	496a      	ldr	r1, [pc, #424]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 800217c:	4313      	orrs	r3, r2
 800217e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0310 	and.w	r3, r3, #16
 8002188:	2b00      	cmp	r3, #0
 800218a:	d010      	beq.n	80021ae <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	699a      	ldr	r2, [r3, #24]
 8002190:	4b64      	ldr	r3, [pc, #400]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002198:	429a      	cmp	r2, r3
 800219a:	d908      	bls.n	80021ae <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800219c:	4b61      	ldr	r3, [pc, #388]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	495e      	ldr	r1, [pc, #376]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 0320 	and.w	r3, r3, #32
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d010      	beq.n	80021dc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	69da      	ldr	r2, [r3, #28]
 80021be:	4b59      	ldr	r3, [pc, #356]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 80021c0:	6a1b      	ldr	r3, [r3, #32]
 80021c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021c6:	429a      	cmp	r2, r3
 80021c8:	d908      	bls.n	80021dc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80021ca:	4b56      	ldr	r3, [pc, #344]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	69db      	ldr	r3, [r3, #28]
 80021d6:	4953      	ldr	r1, [pc, #332]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d010      	beq.n	800220a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68da      	ldr	r2, [r3, #12]
 80021ec:	4b4d      	ldr	r3, [pc, #308]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	f003 030f 	and.w	r3, r3, #15
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d908      	bls.n	800220a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f8:	4b4a      	ldr	r3, [pc, #296]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 80021fa:	699b      	ldr	r3, [r3, #24]
 80021fc:	f023 020f 	bic.w	r2, r3, #15
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4947      	ldr	r1, [pc, #284]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 8002206:	4313      	orrs	r3, r2
 8002208:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	2b00      	cmp	r3, #0
 8002214:	d055      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002216:	4b43      	ldr	r3, [pc, #268]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	4940      	ldr	r1, [pc, #256]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 8002224:	4313      	orrs	r3, r2
 8002226:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	2b02      	cmp	r3, #2
 800222e:	d107      	bne.n	8002240 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002230:	4b3c      	ldr	r3, [pc, #240]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d121      	bne.n	8002280 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0f6      	b.n	800242e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	2b03      	cmp	r3, #3
 8002246:	d107      	bne.n	8002258 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002248:	4b36      	ldr	r3, [pc, #216]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d115      	bne.n	8002280 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e0ea      	b.n	800242e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d107      	bne.n	8002270 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002260:	4b30      	ldr	r3, [pc, #192]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002268:	2b00      	cmp	r3, #0
 800226a:	d109      	bne.n	8002280 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0de      	b.n	800242e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002270:	4b2c      	ldr	r3, [pc, #176]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0304 	and.w	r3, r3, #4
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e0d6      	b.n	800242e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002280:	4b28      	ldr	r3, [pc, #160]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	f023 0207 	bic.w	r2, r3, #7
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	4925      	ldr	r1, [pc, #148]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 800228e:	4313      	orrs	r3, r2
 8002290:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002292:	f7fe ffab 	bl	80011ec <HAL_GetTick>
 8002296:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002298:	e00a      	b.n	80022b0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800229a:	f7fe ffa7 	bl	80011ec <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d901      	bls.n	80022b0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80022ac:	2303      	movs	r3, #3
 80022ae:	e0be      	b.n	800242e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022b0:	4b1c      	ldr	r3, [pc, #112]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	429a      	cmp	r2, r3
 80022c0:	d1eb      	bne.n	800229a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d010      	beq.n	80022f0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f003 030f 	and.w	r3, r3, #15
 80022da:	429a      	cmp	r2, r3
 80022dc:	d208      	bcs.n	80022f0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	f023 020f 	bic.w	r2, r3, #15
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	490e      	ldr	r1, [pc, #56]	; (8002324 <HAL_RCC_ClockConfig+0x244>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022f0:	4b0b      	ldr	r3, [pc, #44]	; (8002320 <HAL_RCC_ClockConfig+0x240>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 030f 	and.w	r3, r3, #15
 80022f8:	683a      	ldr	r2, [r7, #0]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d214      	bcs.n	8002328 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fe:	4b08      	ldr	r3, [pc, #32]	; (8002320 <HAL_RCC_ClockConfig+0x240>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f023 020f 	bic.w	r2, r3, #15
 8002306:	4906      	ldr	r1, [pc, #24]	; (8002320 <HAL_RCC_ClockConfig+0x240>)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	4313      	orrs	r3, r2
 800230c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800230e:	4b04      	ldr	r3, [pc, #16]	; (8002320 <HAL_RCC_ClockConfig+0x240>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	683a      	ldr	r2, [r7, #0]
 8002318:	429a      	cmp	r2, r3
 800231a:	d005      	beq.n	8002328 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e086      	b.n	800242e <HAL_RCC_ClockConfig+0x34e>
 8002320:	52002000 	.word	0x52002000
 8002324:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	d010      	beq.n	8002356 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691a      	ldr	r2, [r3, #16]
 8002338:	4b3f      	ldr	r3, [pc, #252]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002340:	429a      	cmp	r2, r3
 8002342:	d208      	bcs.n	8002356 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002344:	4b3c      	ldr	r3, [pc, #240]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 8002346:	699b      	ldr	r3, [r3, #24]
 8002348:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	4939      	ldr	r1, [pc, #228]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 8002352:	4313      	orrs	r3, r2
 8002354:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d010      	beq.n	8002384 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	4b34      	ldr	r3, [pc, #208]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800236e:	429a      	cmp	r2, r3
 8002370:	d208      	bcs.n	8002384 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002372:	4b31      	ldr	r3, [pc, #196]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 8002374:	69db      	ldr	r3, [r3, #28]
 8002376:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	492e      	ldr	r1, [pc, #184]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 8002380:	4313      	orrs	r3, r2
 8002382:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0310 	and.w	r3, r3, #16
 800238c:	2b00      	cmp	r3, #0
 800238e:	d010      	beq.n	80023b2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699a      	ldr	r2, [r3, #24]
 8002394:	4b28      	ldr	r3, [pc, #160]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 8002396:	69db      	ldr	r3, [r3, #28]
 8002398:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800239c:	429a      	cmp	r2, r3
 800239e:	d208      	bcs.n	80023b2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80023a0:	4b25      	ldr	r3, [pc, #148]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 80023a2:	69db      	ldr	r3, [r3, #28]
 80023a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	699b      	ldr	r3, [r3, #24]
 80023ac:	4922      	ldr	r1, [pc, #136]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0320 	and.w	r3, r3, #32
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d010      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69da      	ldr	r2, [r3, #28]
 80023c2:	4b1d      	ldr	r3, [pc, #116]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d208      	bcs.n	80023e0 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80023ce:	4b1a      	ldr	r3, [pc, #104]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	4917      	ldr	r1, [pc, #92]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80023e0:	f000 f834 	bl	800244c <HAL_RCC_GetSysClockFreq>
 80023e4:	4602      	mov	r2, r0
 80023e6:	4b14      	ldr	r3, [pc, #80]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	0a1b      	lsrs	r3, r3, #8
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	4912      	ldr	r1, [pc, #72]	; (800243c <HAL_RCC_ClockConfig+0x35c>)
 80023f2:	5ccb      	ldrb	r3, [r1, r3]
 80023f4:	f003 031f 	and.w	r3, r3, #31
 80023f8:	fa22 f303 	lsr.w	r3, r2, r3
 80023fc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80023fe:	4b0e      	ldr	r3, [pc, #56]	; (8002438 <HAL_RCC_ClockConfig+0x358>)
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	4a0d      	ldr	r2, [pc, #52]	; (800243c <HAL_RCC_ClockConfig+0x35c>)
 8002408:	5cd3      	ldrb	r3, [r2, r3]
 800240a:	f003 031f 	and.w	r3, r3, #31
 800240e:	693a      	ldr	r2, [r7, #16]
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
 8002414:	4a0a      	ldr	r2, [pc, #40]	; (8002440 <HAL_RCC_ClockConfig+0x360>)
 8002416:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002418:	4a0a      	ldr	r2, [pc, #40]	; (8002444 <HAL_RCC_ClockConfig+0x364>)
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800241e:	4b0a      	ldr	r3, [pc, #40]	; (8002448 <HAL_RCC_ClockConfig+0x368>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4618      	mov	r0, r3
 8002424:	f7fe fe98 	bl	8001158 <HAL_InitTick>
 8002428:	4603      	mov	r3, r0
 800242a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800242c:	7bfb      	ldrb	r3, [r7, #15]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	58024400 	.word	0x58024400
 800243c:	08003060 	.word	0x08003060
 8002440:	2400000c 	.word	0x2400000c
 8002444:	24000008 	.word	0x24000008
 8002448:	24000010 	.word	0x24000010

0800244c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800244c:	b480      	push	{r7}
 800244e:	b089      	sub	sp, #36	; 0x24
 8002450:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002452:	4bb3      	ldr	r3, [pc, #716]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800245a:	2b18      	cmp	r3, #24
 800245c:	f200 8155 	bhi.w	800270a <HAL_RCC_GetSysClockFreq+0x2be>
 8002460:	a201      	add	r2, pc, #4	; (adr r2, 8002468 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002466:	bf00      	nop
 8002468:	080024cd 	.word	0x080024cd
 800246c:	0800270b 	.word	0x0800270b
 8002470:	0800270b 	.word	0x0800270b
 8002474:	0800270b 	.word	0x0800270b
 8002478:	0800270b 	.word	0x0800270b
 800247c:	0800270b 	.word	0x0800270b
 8002480:	0800270b 	.word	0x0800270b
 8002484:	0800270b 	.word	0x0800270b
 8002488:	080024f3 	.word	0x080024f3
 800248c:	0800270b 	.word	0x0800270b
 8002490:	0800270b 	.word	0x0800270b
 8002494:	0800270b 	.word	0x0800270b
 8002498:	0800270b 	.word	0x0800270b
 800249c:	0800270b 	.word	0x0800270b
 80024a0:	0800270b 	.word	0x0800270b
 80024a4:	0800270b 	.word	0x0800270b
 80024a8:	080024f9 	.word	0x080024f9
 80024ac:	0800270b 	.word	0x0800270b
 80024b0:	0800270b 	.word	0x0800270b
 80024b4:	0800270b 	.word	0x0800270b
 80024b8:	0800270b 	.word	0x0800270b
 80024bc:	0800270b 	.word	0x0800270b
 80024c0:	0800270b 	.word	0x0800270b
 80024c4:	0800270b 	.word	0x0800270b
 80024c8:	080024ff 	.word	0x080024ff
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024cc:	4b94      	ldr	r3, [pc, #592]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0320 	and.w	r3, r3, #32
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d009      	beq.n	80024ec <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80024d8:	4b91      	ldr	r3, [pc, #580]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	08db      	lsrs	r3, r3, #3
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	4a90      	ldr	r2, [pc, #576]	; (8002724 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024e4:	fa22 f303 	lsr.w	r3, r2, r3
 80024e8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80024ea:	e111      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80024ec:	4b8d      	ldr	r3, [pc, #564]	; (8002724 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024ee:	61bb      	str	r3, [r7, #24]
    break;
 80024f0:	e10e      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80024f2:	4b8d      	ldr	r3, [pc, #564]	; (8002728 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024f4:	61bb      	str	r3, [r7, #24]
    break;
 80024f6:	e10b      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80024f8:	4b8c      	ldr	r3, [pc, #560]	; (800272c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80024fa:	61bb      	str	r3, [r7, #24]
    break;
 80024fc:	e108      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80024fe:	4b88      	ldr	r3, [pc, #544]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002508:	4b85      	ldr	r3, [pc, #532]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	091b      	lsrs	r3, r3, #4
 800250e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002512:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002514:	4b82      	ldr	r3, [pc, #520]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800251e:	4b80      	ldr	r3, [pc, #512]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002522:	08db      	lsrs	r3, r3, #3
 8002524:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002528:	68fa      	ldr	r2, [r7, #12]
 800252a:	fb02 f303 	mul.w	r3, r2, r3
 800252e:	ee07 3a90 	vmov	s15, r3
 8002532:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002536:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 80e1 	beq.w	8002704 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2b02      	cmp	r3, #2
 8002546:	f000 8083 	beq.w	8002650 <HAL_RCC_GetSysClockFreq+0x204>
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	2b02      	cmp	r3, #2
 800254e:	f200 80a1 	bhi.w	8002694 <HAL_RCC_GetSysClockFreq+0x248>
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_RCC_GetSysClockFreq+0x114>
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d056      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x1c0>
 800255e:	e099      	b.n	8002694 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002560:	4b6f      	ldr	r3, [pc, #444]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0320 	and.w	r3, r3, #32
 8002568:	2b00      	cmp	r3, #0
 800256a:	d02d      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800256c:	4b6c      	ldr	r3, [pc, #432]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	08db      	lsrs	r3, r3, #3
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	4a6b      	ldr	r2, [pc, #428]	; (8002724 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002578:	fa22 f303 	lsr.w	r3, r2, r3
 800257c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	ee07 3a90 	vmov	s15, r3
 8002584:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	ee07 3a90 	vmov	s15, r3
 800258e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002596:	4b62      	ldr	r3, [pc, #392]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800259e:	ee07 3a90 	vmov	s15, r3
 80025a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80025aa:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002730 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80025c6:	e087      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	ee07 3a90 	vmov	s15, r3
 80025ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025d2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002734 <HAL_RCC_GetSysClockFreq+0x2e8>
 80025d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025da:	4b51      	ldr	r3, [pc, #324]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e2:	ee07 3a90 	vmov	s15, r3
 80025e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80025ee:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002730 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800260a:	e065      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	ee07 3a90 	vmov	s15, r3
 8002612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002616:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002738 <HAL_RCC_GetSysClockFreq+0x2ec>
 800261a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800261e:	4b40      	ldr	r3, [pc, #256]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002626:	ee07 3a90 	vmov	s15, r3
 800262a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800262e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002632:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002730 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800263a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800263e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800264a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800264e:	e043      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	ee07 3a90 	vmov	s15, r3
 8002656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800265a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800273c <HAL_RCC_GetSysClockFreq+0x2f0>
 800265e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002662:	4b2f      	ldr	r3, [pc, #188]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800266a:	ee07 3a90 	vmov	s15, r3
 800266e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002672:	ed97 6a02 	vldr	s12, [r7, #8]
 8002676:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002730 <HAL_RCC_GetSysClockFreq+0x2e4>
 800267a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800267e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002682:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800268a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002692:	e021      	b.n	80026d8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	ee07 3a90 	vmov	s15, r3
 800269a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800269e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002738 <HAL_RCC_GetSysClockFreq+0x2ec>
 80026a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026a6:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026ae:	ee07 3a90 	vmov	s15, r3
 80026b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80026ba:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002730 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80026d6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80026d8:	4b11      	ldr	r3, [pc, #68]	; (8002720 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026dc:	0a5b      	lsrs	r3, r3, #9
 80026de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026e2:	3301      	adds	r3, #1
 80026e4:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	ee07 3a90 	vmov	s15, r3
 80026ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80026f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80026fc:	ee17 3a90 	vmov	r3, s15
 8002700:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8002702:	e005      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	61bb      	str	r3, [r7, #24]
    break;
 8002708:	e002      	b.n	8002710 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800270c:	61bb      	str	r3, [r7, #24]
    break;
 800270e:	bf00      	nop
  }

  return sysclockfreq;
 8002710:	69bb      	ldr	r3, [r7, #24]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3724      	adds	r7, #36	; 0x24
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	58024400 	.word	0x58024400
 8002724:	03d09000 	.word	0x03d09000
 8002728:	003d0900 	.word	0x003d0900
 800272c:	017d7840 	.word	0x017d7840
 8002730:	46000000 	.word	0x46000000
 8002734:	4c742400 	.word	0x4c742400
 8002738:	4a742400 	.word	0x4a742400
 800273c:	4bbebc20 	.word	0x4bbebc20

08002740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d101      	bne.n	8002752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e049      	b.n	80027e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002758:	b2db      	uxtb	r3, r3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d106      	bne.n	800276c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2200      	movs	r2, #0
 8002762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7fe fb42 	bl	8000df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2202      	movs	r2, #2
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3304      	adds	r3, #4
 800277c:	4619      	mov	r1, r3
 800277e:	4610      	mov	r0, r2
 8002780:	f000 f92a 	bl	80029d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
	...

080027f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002800:	2b01      	cmp	r3, #1
 8002802:	d101      	bne.n	8002808 <HAL_TIM_ConfigClockSource+0x18>
 8002804:	2302      	movs	r3, #2
 8002806:	e0db      	b.n	80029c0 <HAL_TIM_ConfigClockSource+0x1d0>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2202      	movs	r2, #2
 8002814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002820:	68fa      	ldr	r2, [r7, #12]
 8002822:	4b69      	ldr	r3, [pc, #420]	; (80029c8 <HAL_TIM_ConfigClockSource+0x1d8>)
 8002824:	4013      	ands	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800282e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a63      	ldr	r2, [pc, #396]	; (80029cc <HAL_TIM_ConfigClockSource+0x1dc>)
 800283e:	4293      	cmp	r3, r2
 8002840:	f000 80a9 	beq.w	8002996 <HAL_TIM_ConfigClockSource+0x1a6>
 8002844:	4a61      	ldr	r2, [pc, #388]	; (80029cc <HAL_TIM_ConfigClockSource+0x1dc>)
 8002846:	4293      	cmp	r3, r2
 8002848:	f200 80ae 	bhi.w	80029a8 <HAL_TIM_ConfigClockSource+0x1b8>
 800284c:	4a60      	ldr	r2, [pc, #384]	; (80029d0 <HAL_TIM_ConfigClockSource+0x1e0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	f000 80a1 	beq.w	8002996 <HAL_TIM_ConfigClockSource+0x1a6>
 8002854:	4a5e      	ldr	r2, [pc, #376]	; (80029d0 <HAL_TIM_ConfigClockSource+0x1e0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	f200 80a6 	bhi.w	80029a8 <HAL_TIM_ConfigClockSource+0x1b8>
 800285c:	4a5d      	ldr	r2, [pc, #372]	; (80029d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	f000 8099 	beq.w	8002996 <HAL_TIM_ConfigClockSource+0x1a6>
 8002864:	4a5b      	ldr	r2, [pc, #364]	; (80029d4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8002866:	4293      	cmp	r3, r2
 8002868:	f200 809e 	bhi.w	80029a8 <HAL_TIM_ConfigClockSource+0x1b8>
 800286c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002870:	f000 8091 	beq.w	8002996 <HAL_TIM_ConfigClockSource+0x1a6>
 8002874:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8002878:	f200 8096 	bhi.w	80029a8 <HAL_TIM_ConfigClockSource+0x1b8>
 800287c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002880:	f000 8089 	beq.w	8002996 <HAL_TIM_ConfigClockSource+0x1a6>
 8002884:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002888:	f200 808e 	bhi.w	80029a8 <HAL_TIM_ConfigClockSource+0x1b8>
 800288c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002890:	d03e      	beq.n	8002910 <HAL_TIM_ConfigClockSource+0x120>
 8002892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002896:	f200 8087 	bhi.w	80029a8 <HAL_TIM_ConfigClockSource+0x1b8>
 800289a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800289e:	f000 8085 	beq.w	80029ac <HAL_TIM_ConfigClockSource+0x1bc>
 80028a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a6:	d87f      	bhi.n	80029a8 <HAL_TIM_ConfigClockSource+0x1b8>
 80028a8:	2b70      	cmp	r3, #112	; 0x70
 80028aa:	d01a      	beq.n	80028e2 <HAL_TIM_ConfigClockSource+0xf2>
 80028ac:	2b70      	cmp	r3, #112	; 0x70
 80028ae:	d87b      	bhi.n	80029a8 <HAL_TIM_ConfigClockSource+0x1b8>
 80028b0:	2b60      	cmp	r3, #96	; 0x60
 80028b2:	d050      	beq.n	8002956 <HAL_TIM_ConfigClockSource+0x166>
 80028b4:	2b60      	cmp	r3, #96	; 0x60
 80028b6:	d877      	bhi.n	80029a8 <HAL_TIM_ConfigClockSource+0x1b8>
 80028b8:	2b50      	cmp	r3, #80	; 0x50
 80028ba:	d03c      	beq.n	8002936 <HAL_TIM_ConfigClockSource+0x146>
 80028bc:	2b50      	cmp	r3, #80	; 0x50
 80028be:	d873      	bhi.n	80029a8 <HAL_TIM_ConfigClockSource+0x1b8>
 80028c0:	2b40      	cmp	r3, #64	; 0x40
 80028c2:	d058      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0x186>
 80028c4:	2b40      	cmp	r3, #64	; 0x40
 80028c6:	d86f      	bhi.n	80029a8 <HAL_TIM_ConfigClockSource+0x1b8>
 80028c8:	2b30      	cmp	r3, #48	; 0x30
 80028ca:	d064      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0x1a6>
 80028cc:	2b30      	cmp	r3, #48	; 0x30
 80028ce:	d86b      	bhi.n	80029a8 <HAL_TIM_ConfigClockSource+0x1b8>
 80028d0:	2b20      	cmp	r3, #32
 80028d2:	d060      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0x1a6>
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d867      	bhi.n	80029a8 <HAL_TIM_ConfigClockSource+0x1b8>
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d05c      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0x1a6>
 80028dc:	2b10      	cmp	r3, #16
 80028de:	d05a      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0x1a6>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80028e0:	e062      	b.n	80029a8 <HAL_TIM_ConfigClockSource+0x1b8>
      TIM_ETR_SetConfig(htim->Instance,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6818      	ldr	r0, [r3, #0]
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6899      	ldr	r1, [r3, #8]
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	68db      	ldr	r3, [r3, #12]
 80028f2:	f000 f989 	bl	8002c08 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002904:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	609a      	str	r2, [r3, #8]
      break;
 800290e:	e04e      	b.n	80029ae <HAL_TIM_ConfigClockSource+0x1be>
      TIM_ETR_SetConfig(htim->Instance,
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6818      	ldr	r0, [r3, #0]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	6899      	ldr	r1, [r3, #8]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685a      	ldr	r2, [r3, #4]
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f000 f972 	bl	8002c08 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689a      	ldr	r2, [r3, #8]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002932:	609a      	str	r2, [r3, #8]
      break;
 8002934:	e03b      	b.n	80029ae <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	6859      	ldr	r1, [r3, #4]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	461a      	mov	r2, r3
 8002944:	f000 f8e2 	bl	8002b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	2150      	movs	r1, #80	; 0x50
 800294e:	4618      	mov	r0, r3
 8002950:	f000 f93c 	bl	8002bcc <TIM_ITRx_SetConfig>
      break;
 8002954:	e02b      	b.n	80029ae <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	6859      	ldr	r1, [r3, #4]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	461a      	mov	r2, r3
 8002964:	f000 f901 	bl	8002b6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2160      	movs	r1, #96	; 0x60
 800296e:	4618      	mov	r0, r3
 8002970:	f000 f92c 	bl	8002bcc <TIM_ITRx_SetConfig>
      break;
 8002974:	e01b      	b.n	80029ae <HAL_TIM_ConfigClockSource+0x1be>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	6859      	ldr	r1, [r3, #4]
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	461a      	mov	r2, r3
 8002984:	f000 f8c2 	bl	8002b0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2140      	movs	r1, #64	; 0x40
 800298e:	4618      	mov	r0, r3
 8002990:	f000 f91c 	bl	8002bcc <TIM_ITRx_SetConfig>
      break;
 8002994:	e00b      	b.n	80029ae <HAL_TIM_ConfigClockSource+0x1be>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4619      	mov	r1, r3
 80029a0:	4610      	mov	r0, r2
 80029a2:	f000 f913 	bl	8002bcc <TIM_ITRx_SetConfig>
        break;
 80029a6:	e002      	b.n	80029ae <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80029a8:	bf00      	nop
 80029aa:	e000      	b.n	80029ae <HAL_TIM_ConfigClockSource+0x1be>
      break;
 80029ac:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	ffceff88 	.word	0xffceff88
 80029cc:	00100040 	.word	0x00100040
 80029d0:	00100030 	.word	0x00100030
 80029d4:	00100020 	.word	0x00100020

080029d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a40      	ldr	r2, [pc, #256]	; (8002aec <TIM_Base_SetConfig+0x114>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d013      	beq.n	8002a18 <TIM_Base_SetConfig+0x40>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f6:	d00f      	beq.n	8002a18 <TIM_Base_SetConfig+0x40>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a3d      	ldr	r2, [pc, #244]	; (8002af0 <TIM_Base_SetConfig+0x118>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d00b      	beq.n	8002a18 <TIM_Base_SetConfig+0x40>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a3c      	ldr	r2, [pc, #240]	; (8002af4 <TIM_Base_SetConfig+0x11c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d007      	beq.n	8002a18 <TIM_Base_SetConfig+0x40>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a3b      	ldr	r2, [pc, #236]	; (8002af8 <TIM_Base_SetConfig+0x120>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d003      	beq.n	8002a18 <TIM_Base_SetConfig+0x40>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a3a      	ldr	r2, [pc, #232]	; (8002afc <TIM_Base_SetConfig+0x124>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d108      	bne.n	8002a2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	68fa      	ldr	r2, [r7, #12]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a2f      	ldr	r2, [pc, #188]	; (8002aec <TIM_Base_SetConfig+0x114>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d01f      	beq.n	8002a72 <TIM_Base_SetConfig+0x9a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a38:	d01b      	beq.n	8002a72 <TIM_Base_SetConfig+0x9a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a2c      	ldr	r2, [pc, #176]	; (8002af0 <TIM_Base_SetConfig+0x118>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d017      	beq.n	8002a72 <TIM_Base_SetConfig+0x9a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a2b      	ldr	r2, [pc, #172]	; (8002af4 <TIM_Base_SetConfig+0x11c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d013      	beq.n	8002a72 <TIM_Base_SetConfig+0x9a>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a2a      	ldr	r2, [pc, #168]	; (8002af8 <TIM_Base_SetConfig+0x120>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d00f      	beq.n	8002a72 <TIM_Base_SetConfig+0x9a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a29      	ldr	r2, [pc, #164]	; (8002afc <TIM_Base_SetConfig+0x124>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d00b      	beq.n	8002a72 <TIM_Base_SetConfig+0x9a>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a28      	ldr	r2, [pc, #160]	; (8002b00 <TIM_Base_SetConfig+0x128>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d007      	beq.n	8002a72 <TIM_Base_SetConfig+0x9a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a27      	ldr	r2, [pc, #156]	; (8002b04 <TIM_Base_SetConfig+0x12c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d003      	beq.n	8002a72 <TIM_Base_SetConfig+0x9a>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a26      	ldr	r2, [pc, #152]	; (8002b08 <TIM_Base_SetConfig+0x130>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d108      	bne.n	8002a84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	68db      	ldr	r3, [r3, #12]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	695b      	ldr	r3, [r3, #20]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a10      	ldr	r2, [pc, #64]	; (8002aec <TIM_Base_SetConfig+0x114>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d00f      	beq.n	8002ad0 <TIM_Base_SetConfig+0xf8>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	4a12      	ldr	r2, [pc, #72]	; (8002afc <TIM_Base_SetConfig+0x124>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d00b      	beq.n	8002ad0 <TIM_Base_SetConfig+0xf8>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a11      	ldr	r2, [pc, #68]	; (8002b00 <TIM_Base_SetConfig+0x128>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d007      	beq.n	8002ad0 <TIM_Base_SetConfig+0xf8>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	4a10      	ldr	r2, [pc, #64]	; (8002b04 <TIM_Base_SetConfig+0x12c>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d003      	beq.n	8002ad0 <TIM_Base_SetConfig+0xf8>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a0f      	ldr	r2, [pc, #60]	; (8002b08 <TIM_Base_SetConfig+0x130>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d103      	bne.n	8002ad8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	691a      	ldr	r2, [r3, #16]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	615a      	str	r2, [r3, #20]
}
 8002ade:	bf00      	nop
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40010000 	.word	0x40010000
 8002af0:	40000400 	.word	0x40000400
 8002af4:	40000800 	.word	0x40000800
 8002af8:	40000c00 	.word	0x40000c00
 8002afc:	40010400 	.word	0x40010400
 8002b00:	40014000 	.word	0x40014000
 8002b04:	40014400 	.word	0x40014400
 8002b08:	40014800 	.word	0x40014800

08002b0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b087      	sub	sp, #28
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6a1b      	ldr	r3, [r3, #32]
 8002b1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	f023 0201 	bic.w	r2, r3, #1
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	f023 030a 	bic.w	r3, r3, #10
 8002b48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	621a      	str	r2, [r3, #32]
}
 8002b5e:	bf00      	nop
 8002b60:	371c      	adds	r7, #28
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b087      	sub	sp, #28
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	60f8      	str	r0, [r7, #12]
 8002b72:	60b9      	str	r1, [r7, #8]
 8002b74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	f023 0210 	bic.w	r2, r3, #16
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	031b      	lsls	r3, r3, #12
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ba6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	693a      	ldr	r2, [r7, #16]
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	697a      	ldr	r2, [r7, #20]
 8002bb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	621a      	str	r2, [r3, #32]
}
 8002bbe:	bf00      	nop
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
	...

08002bcc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bdc:	68fa      	ldr	r2, [r7, #12]
 8002bde:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <TIM_ITRx_SetConfig+0x38>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f043 0307 	orr.w	r3, r3, #7
 8002bee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	609a      	str	r2, [r3, #8]
}
 8002bf6:	bf00      	nop
 8002bf8:	3714      	adds	r7, #20
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	ffcfff8f 	.word	0xffcfff8f

08002c08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	021a      	lsls	r2, r3, #8
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	4313      	orrs	r3, r2
 8002c34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	609a      	str	r2, [r3, #8]
}
 8002c3c:	bf00      	nop
 8002c3e:	371c      	adds	r7, #28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d101      	bne.n	8002c60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e068      	b.n	8002d32 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a2e      	ldr	r2, [pc, #184]	; (8002d40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d004      	beq.n	8002c94 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a2d      	ldr	r2, [pc, #180]	; (8002d44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d108      	bne.n	8002ca6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002c9a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	68fa      	ldr	r2, [r7, #12]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cac:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68fa      	ldr	r2, [r7, #12]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68fa      	ldr	r2, [r7, #12]
 8002cbe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a1e      	ldr	r2, [pc, #120]	; (8002d40 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d01d      	beq.n	8002d06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cd2:	d018      	beq.n	8002d06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1b      	ldr	r2, [pc, #108]	; (8002d48 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d013      	beq.n	8002d06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a1a      	ldr	r2, [pc, #104]	; (8002d4c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d00e      	beq.n	8002d06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a18      	ldr	r2, [pc, #96]	; (8002d50 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d009      	beq.n	8002d06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a13      	ldr	r2, [pc, #76]	; (8002d44 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d004      	beq.n	8002d06 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a14      	ldr	r2, [pc, #80]	; (8002d54 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d10c      	bne.n	8002d20 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68ba      	ldr	r2, [r7, #8]
 8002d1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40010000 	.word	0x40010000
 8002d44:	40010400 	.word	0x40010400
 8002d48:	40000400 	.word	0x40000400
 8002d4c:	40000800 	.word	0x40000800
 8002d50:	40000c00 	.word	0x40000c00
 8002d54:	40001800 	.word	0x40001800

08002d58 <__errno>:
 8002d58:	4b01      	ldr	r3, [pc, #4]	; (8002d60 <__errno+0x8>)
 8002d5a:	6818      	ldr	r0, [r3, #0]
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	24000018 	.word	0x24000018

08002d64 <__libc_init_array>:
 8002d64:	b570      	push	{r4, r5, r6, lr}
 8002d66:	4d0d      	ldr	r5, [pc, #52]	; (8002d9c <__libc_init_array+0x38>)
 8002d68:	4c0d      	ldr	r4, [pc, #52]	; (8002da0 <__libc_init_array+0x3c>)
 8002d6a:	1b64      	subs	r4, r4, r5
 8002d6c:	10a4      	asrs	r4, r4, #2
 8002d6e:	2600      	movs	r6, #0
 8002d70:	42a6      	cmp	r6, r4
 8002d72:	d109      	bne.n	8002d88 <__libc_init_array+0x24>
 8002d74:	4d0b      	ldr	r5, [pc, #44]	; (8002da4 <__libc_init_array+0x40>)
 8002d76:	4c0c      	ldr	r4, [pc, #48]	; (8002da8 <__libc_init_array+0x44>)
 8002d78:	f000 f964 	bl	8003044 <_init>
 8002d7c:	1b64      	subs	r4, r4, r5
 8002d7e:	10a4      	asrs	r4, r4, #2
 8002d80:	2600      	movs	r6, #0
 8002d82:	42a6      	cmp	r6, r4
 8002d84:	d105      	bne.n	8002d92 <__libc_init_array+0x2e>
 8002d86:	bd70      	pop	{r4, r5, r6, pc}
 8002d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d8c:	4798      	blx	r3
 8002d8e:	3601      	adds	r6, #1
 8002d90:	e7ee      	b.n	8002d70 <__libc_init_array+0xc>
 8002d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d96:	4798      	blx	r3
 8002d98:	3601      	adds	r6, #1
 8002d9a:	e7f2      	b.n	8002d82 <__libc_init_array+0x1e>
 8002d9c:	08003080 	.word	0x08003080
 8002da0:	08003080 	.word	0x08003080
 8002da4:	08003080 	.word	0x08003080
 8002da8:	08003084 	.word	0x08003084

08002dac <memset>:
 8002dac:	4402      	add	r2, r0
 8002dae:	4603      	mov	r3, r0
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d100      	bne.n	8002db6 <memset+0xa>
 8002db4:	4770      	bx	lr
 8002db6:	f803 1b01 	strb.w	r1, [r3], #1
 8002dba:	e7f9      	b.n	8002db0 <memset+0x4>
 8002dbc:	0000      	movs	r0, r0
	...

08002dc0 <fmod>:
 8002dc0:	b508      	push	{r3, lr}
 8002dc2:	ed2d 8b04 	vpush	{d8-d9}
 8002dc6:	eeb0 9b40 	vmov.f64	d9, d0
 8002dca:	eeb0 8b41 	vmov.f64	d8, d1
 8002dce:	f000 f825 	bl	8002e1c <__ieee754_fmod>
 8002dd2:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <fmod+0x58>)
 8002dd4:	f993 3000 	ldrsb.w	r3, [r3]
 8002dd8:	3301      	adds	r3, #1
 8002dda:	d016      	beq.n	8002e0a <fmod+0x4a>
 8002ddc:	eeb4 8b48 	vcmp.f64	d8, d8
 8002de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002de4:	d611      	bvs.n	8002e0a <fmod+0x4a>
 8002de6:	eeb4 9b49 	vcmp.f64	d9, d9
 8002dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dee:	d60c      	bvs.n	8002e0a <fmod+0x4a>
 8002df0:	ed9f 9b07 	vldr	d9, [pc, #28]	; 8002e10 <fmod+0x50>
 8002df4:	eeb4 8b49 	vcmp.f64	d8, d9
 8002df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dfc:	d105      	bne.n	8002e0a <fmod+0x4a>
 8002dfe:	f7ff ffab 	bl	8002d58 <__errno>
 8002e02:	ee89 0b09 	vdiv.f64	d0, d9, d9
 8002e06:	2321      	movs	r3, #33	; 0x21
 8002e08:	6003      	str	r3, [r0, #0]
 8002e0a:	ecbd 8b04 	vpop	{d8-d9}
 8002e0e:	bd08      	pop	{r3, pc}
	...
 8002e18:	2400007c 	.word	0x2400007c

08002e1c <__ieee754_fmod>:
 8002e1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002e20:	ed8d 1b00 	vstr	d1, [sp]
 8002e24:	e9dd 6500 	ldrd	r6, r5, [sp]
 8002e28:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8002e2c:	ea57 0306 	orrs.w	r3, r7, r6
 8002e30:	46b4      	mov	ip, r6
 8002e32:	d00e      	beq.n	8002e52 <__ieee754_fmod+0x36>
 8002e34:	ee10 9a90 	vmov	r9, s1
 8002e38:	4a7c      	ldr	r2, [pc, #496]	; (800302c <__ieee754_fmod+0x210>)
 8002e3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	dc07      	bgt.n	8002e52 <__ieee754_fmod+0x36>
 8002e42:	4272      	negs	r2, r6
 8002e44:	497a      	ldr	r1, [pc, #488]	; (8003030 <__ieee754_fmod+0x214>)
 8002e46:	4332      	orrs	r2, r6
 8002e48:	ea47 72d2 	orr.w	r2, r7, r2, lsr #31
 8002e4c:	428a      	cmp	r2, r1
 8002e4e:	460a      	mov	r2, r1
 8002e50:	d908      	bls.n	8002e64 <__ieee754_fmod+0x48>
 8002e52:	ed9d 7b00 	vldr	d7, [sp]
 8002e56:	ee20 7b07 	vmul.f64	d7, d0, d7
 8002e5a:	ee87 0b07 	vdiv.f64	d0, d7, d7
 8002e5e:	b003      	add	sp, #12
 8002e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e64:	42bb      	cmp	r3, r7
 8002e66:	ee10 ea10 	vmov	lr, s0
 8002e6a:	ee10 1a10 	vmov	r1, s0
 8002e6e:	f009 4400 	and.w	r4, r9, #2147483648	; 0x80000000
 8002e72:	dc0a      	bgt.n	8002e8a <__ieee754_fmod+0x6e>
 8002e74:	dbf3      	blt.n	8002e5e <__ieee754_fmod+0x42>
 8002e76:	45b6      	cmp	lr, r6
 8002e78:	d3f1      	bcc.n	8002e5e <__ieee754_fmod+0x42>
 8002e7a:	d106      	bne.n	8002e8a <__ieee754_fmod+0x6e>
 8002e7c:	4a6d      	ldr	r2, [pc, #436]	; (8003034 <__ieee754_fmod+0x218>)
 8002e7e:	0fe4      	lsrs	r4, r4, #31
 8002e80:	eb02 04c4 	add.w	r4, r2, r4, lsl #3
 8002e84:	ed94 0b00 	vldr	d0, [r4]
 8002e88:	e7e9      	b.n	8002e5e <__ieee754_fmod+0x42>
 8002e8a:	ea19 0f02 	tst.w	r9, r2
 8002e8e:	d14d      	bne.n	8002f2c <__ieee754_fmod+0x110>
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d144      	bne.n	8002f1e <__ieee754_fmod+0x102>
 8002e94:	4868      	ldr	r0, [pc, #416]	; (8003038 <__ieee754_fmod+0x21c>)
 8002e96:	4672      	mov	r2, lr
 8002e98:	2a00      	cmp	r2, #0
 8002e9a:	dc3d      	bgt.n	8002f18 <__ieee754_fmod+0xfc>
 8002e9c:	4a64      	ldr	r2, [pc, #400]	; (8003030 <__ieee754_fmod+0x214>)
 8002e9e:	402a      	ands	r2, r5
 8002ea0:	2a00      	cmp	r2, #0
 8002ea2:	d155      	bne.n	8002f50 <__ieee754_fmod+0x134>
 8002ea4:	2f00      	cmp	r7, #0
 8002ea6:	d149      	bne.n	8002f3c <__ieee754_fmod+0x120>
 8002ea8:	46b0      	mov	r8, r6
 8002eaa:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8002eae:	f1b8 0f00 	cmp.w	r8, #0
 8002eb2:	dc3f      	bgt.n	8002f34 <__ieee754_fmod+0x118>
 8002eb4:	f8df 8184 	ldr.w	r8, [pc, #388]	; 800303c <__ieee754_fmod+0x220>
 8002eb8:	4540      	cmp	r0, r8
 8002eba:	db4d      	blt.n	8002f58 <__ieee754_fmod+0x13c>
 8002ebc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002ec0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ec4:	f8df e174 	ldr.w	lr, [pc, #372]	; 800303c <__ieee754_fmod+0x220>
 8002ec8:	4572      	cmp	r2, lr
 8002eca:	db59      	blt.n	8002f80 <__ieee754_fmod+0x164>
 8002ecc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8002ed0:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 8002ed4:	1a80      	subs	r0, r0, r2
 8002ed6:	1b5e      	subs	r6, r3, r5
 8002ed8:	eba1 070c 	sub.w	r7, r1, ip
 8002edc:	2800      	cmp	r0, #0
 8002ede:	d165      	bne.n	8002fac <__ieee754_fmod+0x190>
 8002ee0:	4561      	cmp	r1, ip
 8002ee2:	bf38      	it	cc
 8002ee4:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8002ee8:	2e00      	cmp	r6, #0
 8002eea:	bfa4      	itt	ge
 8002eec:	4639      	movge	r1, r7
 8002eee:	4633      	movge	r3, r6
 8002ef0:	ea53 0001 	orrs.w	r0, r3, r1
 8002ef4:	d0c2      	beq.n	8002e7c <__ieee754_fmod+0x60>
 8002ef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002efa:	db6c      	blt.n	8002fd6 <__ieee754_fmod+0x1ba>
 8002efc:	484f      	ldr	r0, [pc, #316]	; (800303c <__ieee754_fmod+0x220>)
 8002efe:	4282      	cmp	r2, r0
 8002f00:	db6f      	blt.n	8002fe2 <__ieee754_fmod+0x1c6>
 8002f02:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8002f06:	4323      	orrs	r3, r4
 8002f08:	f202 32ff 	addw	r2, r2, #1023	; 0x3ff
 8002f0c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8002f10:	460c      	mov	r4, r1
 8002f12:	ec45 4b10 	vmov	d0, r4, r5
 8002f16:	e7a2      	b.n	8002e5e <__ieee754_fmod+0x42>
 8002f18:	3801      	subs	r0, #1
 8002f1a:	0052      	lsls	r2, r2, #1
 8002f1c:	e7bc      	b.n	8002e98 <__ieee754_fmod+0x7c>
 8002f1e:	4847      	ldr	r0, [pc, #284]	; (800303c <__ieee754_fmod+0x220>)
 8002f20:	02da      	lsls	r2, r3, #11
 8002f22:	2a00      	cmp	r2, #0
 8002f24:	ddba      	ble.n	8002e9c <__ieee754_fmod+0x80>
 8002f26:	3801      	subs	r0, #1
 8002f28:	0052      	lsls	r2, r2, #1
 8002f2a:	e7fa      	b.n	8002f22 <__ieee754_fmod+0x106>
 8002f2c:	1518      	asrs	r0, r3, #20
 8002f2e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8002f32:	e7b3      	b.n	8002e9c <__ieee754_fmod+0x80>
 8002f34:	3a01      	subs	r2, #1
 8002f36:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8002f3a:	e7b8      	b.n	8002eae <__ieee754_fmod+0x92>
 8002f3c:	4a3f      	ldr	r2, [pc, #252]	; (800303c <__ieee754_fmod+0x220>)
 8002f3e:	ea4f 28c7 	mov.w	r8, r7, lsl #11
 8002f42:	f1b8 0f00 	cmp.w	r8, #0
 8002f46:	ddb5      	ble.n	8002eb4 <__ieee754_fmod+0x98>
 8002f48:	3a01      	subs	r2, #1
 8002f4a:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8002f4e:	e7f8      	b.n	8002f42 <__ieee754_fmod+0x126>
 8002f50:	153a      	asrs	r2, r7, #20
 8002f52:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8002f56:	e7ad      	b.n	8002eb4 <__ieee754_fmod+0x98>
 8002f58:	eba8 0100 	sub.w	r1, r8, r0
 8002f5c:	291f      	cmp	r1, #31
 8002f5e:	dc09      	bgt.n	8002f74 <__ieee754_fmod+0x158>
 8002f60:	f200 481e 	addw	r8, r0, #1054	; 0x41e
 8002f64:	408b      	lsls	r3, r1
 8002f66:	fa2e f808 	lsr.w	r8, lr, r8
 8002f6a:	ea48 0303 	orr.w	r3, r8, r3
 8002f6e:	fa0e f101 	lsl.w	r1, lr, r1
 8002f72:	e7a7      	b.n	8002ec4 <__ieee754_fmod+0xa8>
 8002f74:	4b32      	ldr	r3, [pc, #200]	; (8003040 <__ieee754_fmod+0x224>)
 8002f76:	1a1b      	subs	r3, r3, r0
 8002f78:	fa0e f303 	lsl.w	r3, lr, r3
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	e7a1      	b.n	8002ec4 <__ieee754_fmod+0xa8>
 8002f80:	ebae 0c02 	sub.w	ip, lr, r2
 8002f84:	f1bc 0f1f 	cmp.w	ip, #31
 8002f88:	dc09      	bgt.n	8002f9e <__ieee754_fmod+0x182>
 8002f8a:	f202 451e 	addw	r5, r2, #1054	; 0x41e
 8002f8e:	fa07 f70c 	lsl.w	r7, r7, ip
 8002f92:	fa26 f505 	lsr.w	r5, r6, r5
 8002f96:	433d      	orrs	r5, r7
 8002f98:	fa06 fc0c 	lsl.w	ip, r6, ip
 8002f9c:	e79a      	b.n	8002ed4 <__ieee754_fmod+0xb8>
 8002f9e:	4d28      	ldr	r5, [pc, #160]	; (8003040 <__ieee754_fmod+0x224>)
 8002fa0:	1aad      	subs	r5, r5, r2
 8002fa2:	fa06 f505 	lsl.w	r5, r6, r5
 8002fa6:	f04f 0c00 	mov.w	ip, #0
 8002faa:	e793      	b.n	8002ed4 <__ieee754_fmod+0xb8>
 8002fac:	4561      	cmp	r1, ip
 8002fae:	bf38      	it	cc
 8002fb0:	f106 36ff 	addcc.w	r6, r6, #4294967295
 8002fb4:	2e00      	cmp	r6, #0
 8002fb6:	da05      	bge.n	8002fc4 <__ieee754_fmod+0x1a8>
 8002fb8:	0fce      	lsrs	r6, r1, #31
 8002fba:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8002fbe:	0049      	lsls	r1, r1, #1
 8002fc0:	3801      	subs	r0, #1
 8002fc2:	e788      	b.n	8002ed6 <__ieee754_fmod+0xba>
 8002fc4:	ea56 0307 	orrs.w	r3, r6, r7
 8002fc8:	f43f af58 	beq.w	8002e7c <__ieee754_fmod+0x60>
 8002fcc:	0ffb      	lsrs	r3, r7, #31
 8002fce:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8002fd2:	0079      	lsls	r1, r7, #1
 8002fd4:	e7f4      	b.n	8002fc0 <__ieee754_fmod+0x1a4>
 8002fd6:	0fc8      	lsrs	r0, r1, #31
 8002fd8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002fdc:	0049      	lsls	r1, r1, #1
 8002fde:	3a01      	subs	r2, #1
 8002fe0:	e789      	b.n	8002ef6 <__ieee754_fmod+0xda>
 8002fe2:	1a80      	subs	r0, r0, r2
 8002fe4:	2814      	cmp	r0, #20
 8002fe6:	dc0c      	bgt.n	8003002 <__ieee754_fmod+0x1e6>
 8002fe8:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 8002fec:	fa03 f202 	lsl.w	r2, r3, r2
 8002ff0:	40c1      	lsrs	r1, r0
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	4103      	asrs	r3, r0
 8002ff6:	ea43 0104 	orr.w	r1, r3, r4
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	ec41 0b10 	vmov	d0, r0, r1
 8003000:	e72d      	b.n	8002e5e <__ieee754_fmod+0x42>
 8003002:	281f      	cmp	r0, #31
 8003004:	dc07      	bgt.n	8003016 <__ieee754_fmod+0x1fa>
 8003006:	f202 421e 	addw	r2, r2, #1054	; 0x41e
 800300a:	40c1      	lsrs	r1, r0
 800300c:	fa03 f202 	lsl.w	r2, r3, r2
 8003010:	430a      	orrs	r2, r1
 8003012:	4623      	mov	r3, r4
 8003014:	e7ef      	b.n	8002ff6 <__ieee754_fmod+0x1da>
 8003016:	f1c2 427f 	rsb	r2, r2, #4278190080	; 0xff000000
 800301a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800301e:	f502 427b 	add.w	r2, r2, #64256	; 0xfb00
 8003022:	32e2      	adds	r2, #226	; 0xe2
 8003024:	fa43 f202 	asr.w	r2, r3, r2
 8003028:	e7f3      	b.n	8003012 <__ieee754_fmod+0x1f6>
 800302a:	bf00      	nop
 800302c:	7fefffff 	.word	0x7fefffff
 8003030:	7ff00000 	.word	0x7ff00000
 8003034:	08003070 	.word	0x08003070
 8003038:	fffffbed 	.word	0xfffffbed
 800303c:	fffffc02 	.word	0xfffffc02
 8003040:	fffffbe2 	.word	0xfffffbe2

08003044 <_init>:
 8003044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003046:	bf00      	nop
 8003048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800304a:	bc08      	pop	{r3}
 800304c:	469e      	mov	lr, r3
 800304e:	4770      	bx	lr

08003050 <_fini>:
 8003050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003052:	bf00      	nop
 8003054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003056:	bc08      	pop	{r3}
 8003058:	469e      	mov	lr, r3
 800305a:	4770      	bx	lr
