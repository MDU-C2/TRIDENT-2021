// This file is automatically generated by Intel rclnodejs
//
// *** DO NOT EDIT directly
//
'use strict';
const ref = require('ref-napi');
const StructType = require('ref-struct-di')(ref);
const ArrayType = require('ref-array-di')(ref);
const primitiveTypes = require('../../rosidl_gen/primitive_types.js');
const deallocator = require('../../rosidl_gen/deallocator.js');
const translator = require('../../rosidl_gen/message_translator.js');
const StringWrapper = require('../../generated/std_msgs/std_msgs__msg__String.js');
const PoseWrapper = require('../../generated/geometry_msgs/geometry_msgs__msg__Pose.js');
const GotoPose_ResultRefStruct = StructType({
  status: primitiveTypes.int16,
  message: primitiveTypes.string,
  delta_pose: PoseWrapper.refObjectType,
  distance_to_goal: primitiveTypes.float64,
});
const GotoPose_ResultRefArray = ArrayType(GotoPose_ResultRefStruct);
const GotoPose_ResultRefStructArray = StructType({
  data: GotoPose_ResultRefArray,
  size: ref.types.size_t,
  capacity: ref.types.size_t
});
// Define the wrapper class.
class GotoPose_ResultWrapper {
  constructor(other) {
    this._wrapperFields = {};
    if (typeof other === 'object' && other._refObject) {
      this._refObject = new GotoPose_ResultRefStruct(other._refObject.toObject());
      this._statusIntialized = true;
      this._messageIntialized = true;
      this._wrapperFields.message =  new StringWrapper(other._wrapperFields.message);
      this._wrapperFields.delta_pose =  new PoseWrapper(other._wrapperFields.delta_pose);
      this._distance_to_goalIntialized = true;
    } else if (typeof other !== 'undefined') {
      this._initMembers();
      translator.constructFromPlanObject(this, other);
    } else {
      this._initMembers();
    }
    this.freeze();
  }
  _initMembers() {
    this._refObject = new GotoPose_ResultRefStruct();
    this._statusIntialized = false;
    this._messageIntialized = false;
    this._wrapperFields.message = new StringWrapper();
    this._wrapperFields.delta_pose = new PoseWrapper();
    this._distance_to_goalIntialized = false;
  }
  static createFromRefObject(refObject) {
    let self = new GotoPose_ResultWrapper();
    self.copyRefObject(refObject);
    return self;
  }
  static createArray() {
    return new GotoPose_ResultArrayWrapper;
  }
  static get ArrayType() {
    return GotoPose_ResultArrayWrapper;
  }
  static get refObjectArrayType() {
    return GotoPose_ResultRefStructArray
  }
  static get refObjectType() {
    return GotoPose_ResultRefStruct;
  }
  toRawROS() {
    this.freeze(true);
    return this._refObject.ref();
  }
  freeze(own = false, checkConsistency = false) {
    if (checkConsistency) {
      if (!this._statusIntialized) {
        throw new TypeError('Invalid argument: status in GotoPose_Result');
      }
      if (!this._messageIntialized) {
        throw new TypeError('Invalid argument: message in GotoPose_Result');
      }
      if (!this._distance_to_goalIntialized) {
        throw new TypeError('Invalid argument: distance_to_goal in GotoPose_Result');
      }
    }
    if (own) {
      this._wrapperFields.message.freeze(own, checkConsistency);
    }
    this._refObject.message = this._wrapperFields.message.refObject;
    this._wrapperFields.delta_pose.freeze(own, checkConsistency);
    this._refObject.delta_pose = this._wrapperFields.delta_pose.refObject;
  }
  serialize() {
    this.freeze(false, true);
    return this._refObject.ref();
  }
  deserialize(refObject) {
    this._statusIntialized = true;
    this._refObject.status = refObject.status;
    this._messageIntialized = true;
    this._wrapperFields.message.data = refObject.message.data;
    this._wrapperFields.delta_pose.copyRefObject(refObject.delta_pose);
    this._distance_to_goalIntialized = true;
    this._refObject.distance_to_goal = refObject.distance_to_goal;
  }
  toPlainObject(enableTypedArray) {
    return translator.toPlainObject(this, enableTypedArray);
  }
  static freeStruct(refObject) {
    StringWrapper.freeStruct(refObject.message);
    PoseWrapper.freeStruct(refObject.delta_pose);
  }
  static destoryRawROS(msg) {
    GotoPose_ResultWrapper.freeStruct(msg.refObject);
  }
  static type() {
    return {pkgName: 'trident_msgs', subFolder: 'action', interfaceName: 'GotoPose_Result'};
  }
  static isPrimitive() {
    return false;
  }
  static get isROSArray() {
    return false;
  }
  get refObject() {
    return this._refObject;
  }
  get status() {
    if (!this._statusIntialized) {
      return undefined;
    }
    return this._refObject.status;
  }
  set status(value) {
    this._statusIntialized = true;
    this._refObject.status = value;
  }
  get message() {
    if (!this._messageIntialized) {
      return undefined;
    }
    return this._wrapperFields.message.data;
  }
  set message(value) {
    this._messageIntialized = true;
    this._wrapperFields.message.data = value;
  }
  get delta_pose() {
    return this._wrapperFields.delta_pose;
  }
  set delta_pose(value) {
    if (value instanceof PoseWrapper) {
      this._wrapperFields.delta_pose.copy(value);
    } else {
      this._wrapperFields.delta_pose.copy(new PoseWrapper(value));
    }
  }
  get distance_to_goal() {
    if (!this._distance_to_goalIntialized) {
      return undefined;
    }
    return this._refObject.distance_to_goal;
  }
  set distance_to_goal(value) {
    this._distance_to_goalIntialized = true;
    this._refObject.distance_to_goal = value;
  }
  copyRefObject(refObject) {
    this._refObject = new GotoPose_ResultRefStruct(refObject.toObject());
    this._statusIntialized = true;
    this._messageIntialized = true;
    this._wrapperFields.message.copyRefObject(this._refObject.message);
    this._wrapperFields.delta_pose.copyRefObject(this._refObject.delta_pose);
    this._distance_to_goalIntialized = true;
  }
  copy(other) {
    this._refObject = new GotoPose_ResultRefStruct(other._refObject.toObject());
    this._statusIntialized = true;
    this._messageIntialized = true;
    this._wrapperFields.message.copy(other._wrapperFields.message);
    this._wrapperFields.delta_pose.copy(other._wrapperFields.delta_pose);
    this._distance_to_goalIntialized = true;
  }
  static get classType() {
    return GotoPose_ResultWrapper;
  }
  static get ROSMessageDef() {
    return {"constants":[],"fields":[{"name":"status","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"int16","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"message","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"string","stringUpperBound":null,"isPrimitiveType":true},"default_value":null},{"name":"delta_pose","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":"geometry_msgs","type":"Pose","stringUpperBound":null,"isPrimitiveType":false},"default_value":null},{"name":"distance_to_goal","type":{"isArray":false,"arraySize":null,"isUpperBound":false,"isDynamicArray":false,"isFixedSizeArray":false,"pkgName":null,"type":"float64","stringUpperBound":null,"isPrimitiveType":true},"default_value":null}],"baseType":{"pkgName":"trident_msgs","type":"GotoPose_Result","stringUpperBound":null,"isPrimitiveType":false},"msgName":"GotoPose_Result"};
  }
  hasMember(name) {
    let memberNames = ["status","message","delta_pose","distance_to_goal"];
    return memberNames.indexOf(name) !== -1;
  }
}
// Define the wrapper of array class.
class GotoPose_ResultArrayWrapper {
  constructor(size = 0) {
    this._resize(size);
  }
  toRawROS() {
    return this._refObject.ref();
  }
  fill(values) {
    const length = values.length;
    this._resize(length);
    values.forEach((value, index) => {
      if (value instanceof GotoPose_ResultWrapper) {
        this._wrappers[index].copy(value);
      } else {
        this._wrappers[index] = new GotoPose_ResultWrapper(value);
      }
    });
  }
  // Put all data currently stored in `this._wrappers` into `this._refObject`
  freeze(own) {
    this._wrappers.forEach((wrapper, index) => {
      wrapper.freeze(own);
      this._refArray[index] = wrapper.refObject;
    });
    this._refObject.size = this._wrappers.length;
    this._refObject.capacity = this._wrappers.length;
    if (this._refObject.capacity === 0) {
      this._refObject.data = null
    } else {
    this._refObject.data = this._refArray.buffer;
    }
  }
  get refObject() {
    return this._refObject;
  }
  get data() {
    return this._wrappers;
  }
  get size() {
    return this._wrappers.length;
  }
  set size(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to GotoPose_ResultArrayWrapper.size setter');
      return;
    }
    return this._resize(value);
  }
  get capacity() {
    return this._wrappers.length;
  }
  set capacity(value) {
    if (typeof value != 'number') {
      throw new TypeError('Invalid argument: should provide a number to GotoPose_ResultArrayWrapper.capacity setter');
    }
    return this._resize(value);
  }
  get refObject() {
    return this._refObject;
  }
  _resize(size) {
    if (size < 0) {
      throw new RangeError('Invalid argument: should provide a positive number');
      return;
    }
    this._refArray = new GotoPose_ResultRefArray(size);
    this._refObject = new GotoPose_ResultRefStructArray();
    this._refObject.size = size;
    this._refObject.capacity = size;
    this._wrappers = new Array();
    for (let i = 0; i < size; i++) {
      this._wrappers.push(new GotoPose_ResultWrapper());
    }
  }
  // Copy all data from `this._refObject` into `this._wrappers`
  copyRefObject(refObject) {
    this._refObject = refObject;
    let refObjectArray = this._refObject.data;
    refObjectArray.length = this._refObject.size;
    this._resize(this._refObject.size);
    for (let index = 0; index < this._refObject.size; index++) {
      this._wrappers[index].copyRefObject(refObjectArray[index]);
    }
  }
  copy(other) {
    if (! (other instanceof GotoPose_ResultArrayWrapper)) {
      throw new TypeError('Invalid argument: should provide "GotoPose_ResultArrayWrapper".');
    }
    this._resize(other.size);
    // Array deep copy
    other._wrappers.forEach((wrapper, index) => {
      this._wrappers[index].copy(wrapper);
    });
  }
  static freeArray(refObject) {
    let refObjectArray = refObject.data;
    refObjectArray.length = refObject.size;
    for (let index = 0; index < refObject.size; index++) {
      GotoPose_ResultWrapper.freeStruct(refObjectArray[index]);
    }
  }
  static get elementType() {
    return GotoPose_ResultWrapper;
  }
  static get isROSArray() {
    return true;
  }
  static get useTypedArray() {
    return false;
  }
  get classType() {
    return GotoPose_ResultArrayWrapper;
  }
}
module.exports = GotoPose_ResultWrapper;
/*
 * The following is the original spec object coming from parser:
{
  "constants": [],
  "fields": [
    {
      "name": "status",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "int16",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "message",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "string",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    },
    {
      "name": "delta_pose",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": "geometry_msgs",
        "type": "Pose",
        "stringUpperBound": null,
        "isPrimitiveType": false
      },
      "default_value": null
    },
    {
      "name": "distance_to_goal",
      "type": {
        "isArray": false,
        "arraySize": null,
        "isUpperBound": false,
        "isDynamicArray": false,
        "isFixedSizeArray": false,
        "pkgName": null,
        "type": "float64",
        "stringUpperBound": null,
        "isPrimitiveType": true
      },
      "default_value": null
    }
  ],
  "baseType": {
    "pkgName": "trident_msgs",
    "type": "GotoPose_Result",
    "stringUpperBound": null,
    "isPrimitiveType": false
  },
  "msgName": "GotoPose_Result"
}
*/
